<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>hsfzxjy</title>
 <link href="http://hsfzxjy.github.io//atom.xml" rel="self"/>
 <link href="http://hsfzxjy.github.io/"/>
 <updated>2015-11-07T21:03:59+08:00</updated>
 <id>http://hsfzxjy.github.io/</id>
 <author>
   <name>Jinyi Xie</name>
   <email>956357208@qq.com</email>
 </author>

 
 <entry>
   <title>初试 node.js：MD5 解密网站</title>
   <link href="http://hsfzxjy.github.io//md5-cracker-powered-by-nodejs/"/>
   <updated>2015-11-06T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//md5-cracker-powered-by-nodejs</id>
   <content type="html">&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;有些日子没写技术笔记了。正好今天刚月考完，写篇东西放松一下。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;node.js，IT界的新角，怀揣着用 javascript 称霸前后端的野心。一年前听说这个东西时，我就被其魅力深深地吸引了。尽管从语法上看，js 继承了其父丑陋的风格，无法和我钟爱的 python 相提并论，但人家的性能却是不可小觑的。浏览器脚本起家，天生支持异步编程，时间驱动，完美压榨 CPU 时间，简直让同步的 python 望尘莫及——更何况，还有 Google 大牛精心优化的 V8 引擎，速度快得飞起，完全弥补了其语法上的不足。&lt;/p&gt;

&lt;p&gt;早就想学 node.js 了，却一直苦于没有动机。软件工程的学习和其他学科很是不同：如果没有动机，没有实践，仅是读干巴巴的文档，那是很乏味的。在之前的项目中我一直使用 python。在对性能没有过高的要求的情况下，python 是敏捷开发的不二之选。而且在 SAE 支持的三种语言中，我最擅长的便是 python（好吧，其实是其他两种我都不会～～）。学习 node.js，确实没有太急切的需求。&lt;/p&gt;

&lt;p&gt;约摸两个星期前吧，@cc 提出了一个新的 idea——在高考后建一个网站，记录同学们毕业后的去向。具体需求尚未确定，但我非常感兴趣。乍一看来，websocket 是必不可少的了，而且对于这类 IO 密集型的网站，MySQL 水土不服，WSGI 模式吃不消。于是我又想到了 node.js——正好趁这个机会，再学一门技术。技多不压身嘛。&lt;/p&gt;

&lt;p&gt;于是，在上周我写了个小 &lt;a href=&quot;https://github.com/hsfzxjy/md5crack/&quot;&gt;demo&lt;/a&gt;，借此透析一下 node.js 及其常见框架。&lt;/p&gt;

&lt;p&gt;说了那么多废话，切入正题。&lt;/p&gt;

&lt;h2&gt;需求 &amp;amp; 构思 &amp;amp; 准备&lt;/h2&gt;

&lt;p&gt;一个小 demo 而已，需求很简洁：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MD5 加密功能&lt;/strong&gt; 用户可以输入任意字符串，网站会返回字符串的 MD5 值，同时将原始串和哈希值存入数据库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MD5 解密功能&lt;/strong&gt; 用户可以输入一个合法的 MD5 值，网站会检索已知的 MD5 值及其对应的原始字符串，若比对成功则返回原串，否则显示未找到。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于是学习 node.js 的 demo，为了简单起见我只用了一个页面，GET 返回空表单，POST 执行加密或解密动作，并返回结果。前端用了 pure.css，一个很简单的 CSS 框架，只为了效果不要太挫。&lt;/p&gt;

&lt;p&gt;在 mongodb 的使用上，我没有用官方的 mongodb driver，而是用了 mongoose。这是出于两点考虑：一是尽管 mongodb 很灵活，但在将来的网站建设中，绝不可能做到 schemeless，否则在设计类似用户系统这样的模块时会很痛苦；二是 mongoose 除了提供了一个 Schema，其他诸如 CRUD 的操作基本还是遵循原生 mongodb driver 的语法，因此并不影响对 mongodb 的理解。&lt;/p&gt;

&lt;p&gt;在 web 框架的选择上，我决定先尝试 express.js。在此之前我曾搜过 &amp;quot;node.js web framework comparison&amp;quot;，其中有篇&lt;a href=&quot;https://www.airpair.com/node.js/posts/nodejs-framework-comparison-express-koa-hapi&quot;&gt;文章&lt;/a&gt;写的不错，较为详尽地分析了三个较为流行的框架 express、koa 以及 hapi。&lt;/p&gt;

&lt;p&gt;express 是元老级的框架了，几乎和 node.js 是同时出现的，在 Github 上 有 16158 个 stars。它是个微框架（micro-framework），在 http 协议上封装了一层。npmjs 上已有成千上百的基于 express 的中间件，用于解决各类的问题。&lt;/p&gt;

&lt;p&gt;koa 是个新型的框架，基于 ES6，Github 上有 4846 个 stars。其突出的特点是用了 ES6 的 generators 实现了协程，可以增加异步编程的可读性——这点和 Tornado 很相似。目前的版本是 0.13，尚未稳定，不敢贸然采用。&lt;/p&gt;

&lt;p&gt;hapi 则是另一种风格，Github 上也有 3283 个 stars。其理念是 用配置代替代码，这在设计 REST API 时是十分方便的，在后续的学习中我可以适当地了解一下。&lt;/p&gt;

&lt;h3&gt;初始化&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nodejs&lt;/code&gt;、&lt;code&gt;npm&lt;/code&gt;、&lt;code&gt;mongodb&lt;/code&gt; 这些必要程序的安装就不用说了。mongodb 和 MySQL 不同，不用做额外的配置，装完就可以用。&lt;/p&gt;

&lt;p&gt;先建目录：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir md5cracker &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;md5cracker
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一路回车——虽然我知道这样不好，但这毕竟只是一个 demo。&lt;/p&gt;

&lt;p&gt;装依赖：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install --save mongodb mongoose express es6-promise
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里&lt;code&gt;es6-promise&lt;/code&gt;是&lt;code&gt;mongoose&lt;/code&gt;的一个依赖，不知为何要单独拿出来安装。&lt;/p&gt;

&lt;p&gt;辅助工具：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g nodemon express-generator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;nodemon&lt;/code&gt;是一个方便的小程序，可以实时检测你的代码库，并在出现变更时重启服务器；&lt;code&gt;express-generator&lt;/code&gt;，正如其名，用于生成 express 网站骨架。&lt;/p&gt;

&lt;p&gt;这里要赞美一下 npm 3：在低版本的 npm 中，依赖的安装是树状结构的，不同的包不能共享依赖——这对有代码体积洁癖的人来说简直不能忍。npm 3 有许多新的特性，其一便是“依赖扁平化”——应该说，这才是正常的做法。&lt;/p&gt;

&lt;p&gt;编辑&lt;code&gt;package.json&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;nodemon ./bin/www&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是为了简化网站的启动命令，完成后使用&lt;code&gt;npm start&lt;/code&gt;即可启动网站，而不必每次都键入&lt;code&gt;nodemon ./bin/www&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;新建&lt;code&gt;nodemon.json&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;execMap&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;js&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;node --harmony&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是&lt;code&gt;nodemon&lt;/code&gt;的配置文件，&lt;code&gt;node&lt;/code&gt;的&lt;code&gt;--harmony&lt;/code&gt;的参数能够启用 ES6 语法。&lt;/p&gt;

&lt;h3&gt;mongodb&lt;/h3&gt;

&lt;p&gt;和 mysql 类似，mongodb 也需要初始化连接的代码。在 &lt;code&gt;app.js&lt;/code&gt; 加入下列语句：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// set up mongodb engine.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mongoose&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;connection error:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mongodb://localhost:27017/crack&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;事实上，这并不是最佳实践。毕竟，并不是所有的请求都会访问数据库，而且所有的请求都依赖于一个连接，可能会带来性能的损失。这里只是一个示范，暂时先不复杂化。&lt;/p&gt;

&lt;p&gt;接下来便是 model 的定义：&lt;/p&gt;

&lt;p&gt;（未完待续）&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>家书·十八岁成人礼</title>
   <link href="http://hsfzxjy.github.io//letter-to-parents/"/>
   <updated>2015-10-18T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//letter-to-parents</id>
   <content type="html">&lt;p&gt;事实上，截至目前，我只有十七岁，但无论年龄的多与少，今天这个特殊的日子，都有着其特殊的意义——是的，我要成人了。&lt;/p&gt;

&lt;p&gt;这里，我想先说一声谢谢。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;这两个字，一部分是对你们养育之恩的感谢。十七年的光阴，在我看来，有如白驹过隙——还未来得及怀着童心去触遍整个世界，世界奇幻的一面却已开始变得乏味。但对你们而言，我想，一定挺漫长的吧。这种体验，我没有经历过，因此我不妄下评论。但我终有一天会体味到，到了那时，或许，我也会有像你们一样的感慨。&lt;/p&gt;

&lt;p&gt;这两个字，还有一部分，是为了感谢你们这么多年来对我默默的支持——这是精神层面的。&lt;strong&gt;做自己喜欢的事&lt;/strong&gt;——这是你们常对我说的一句话。正因为有了这句话，才有了我今天在奥数方面的成绩——曾经，我喜欢数学，并一直坚持了下来。和许多同学相比，我觉得我很幸运。这份来自家庭的信任，我会好好珍惜的。&lt;/p&gt;

&lt;p&gt;成人了，在人生轨道与时间轴交错的节点上，除了望向身后尚未远离的原点，我也想谈谈箭头所指的那边，那未知的前方。&lt;/p&gt;

&lt;p&gt;对于未来，人在其一生中会有许多的想法——很奇怪，但也尽在情理之中——毕竟，未来的变数对想法的影响，是不可预测的，也是不可观测的。曾记得小时候，有段时间我很想当一名隐士——这是受了陶渊明的影响。在现在看来，这有些可笑，毕竟陶是为了避官场而遁世，而我却没有什么正当的理由，仿佛，就是为了隐居而隐居。更何况，这么多年来，我发现世上还是有好些东西是有趣的。凭此，隐居不值得我去尝试。&lt;/p&gt;

&lt;p&gt;此后，随着世事变迁，我又相继有了些其他的想法。其中的每一个，在当时看来，都是自己绝妙的归宿。直到有一天，回首这一连串的想法，我发现了两个规律：其一是&lt;strong&gt;递变性&lt;/strong&gt;，对未来的遐想渐渐不再天马行空，而是向现实靠近——这很自然，因为现实是有引力的，生命的第一要义是生存，在生存之上谈生活才有意义；其二是&lt;strong&gt;相对稳定性&lt;/strong&gt;，即 在任何时候，我都希望，我能做，我喜欢做的事情。&lt;/p&gt;

&lt;p&gt;于是，我认为，生活的意义，在于能做自己喜欢的事情——这也恰是你们常说的。于是，在高中伊始时，我开始做网站——这是现阶段我所喜欢的。无论是否有意义，总而言之，高中这两年我过得很快乐。而且在这过程中，我见识到了自己的工程构建能力和自学能力——顺便说说，这两年乃至可预见的将来，无论遭遇什么，我都不会患得患失，我的淡定即来源于此。因为就算有一天，生活退化成生存，只要有一定的资源，这些能力足以支撑我走下去——而我要的资源，到处都是。因此对于我，未来是未知的，但不会迷惘。&lt;/p&gt;

&lt;p&gt;但从你们的眼中，我读出了担忧——毕竟在你们看来，我没有在干“正事”。我感到不耐烦，因为我不想背离初心；但我又感到犹豫，因为我不想伤到最亲近的人。这时的我，忽然想起了庄子的《逍遥游》，想起其论述的“万物皆有所凭借”的观点。的确，天高任鸟飞，但真要跃上云霄，还得看风的脸色。于是乎，在我的“准则”前，又多了一个条件：&lt;strong&gt;在理智的亲人不极力反对的情况下&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;注意到，这个条件中也隐含了许多条件：毕竟，亲人，也是现实引力的一部分，是世俗的一部分。我害怕变得世俗，怕得要死，身边有太多这样的例子，同是有独立思想的少年，因现实巨大的引力坠入世俗，拼学历搏虚名，混职场谋高位，贷车贷房娶妻生娃，由此碌碌终生。一代又一代，遗传了重复的命，如俄罗斯套娃般相似得悚然，令人窒息。诚然，有些人是由于客观条件的不允许，现实引力过大，以致尚未起飞便就地湮灭，这种人是可怜的。但更多的则是由于他们某些未开化的亲人。但对于我，客观条件是允许的，因此我希望，主观条件不会构成巨大的引力，将我困于史瓦斯半径中，使我化为尘土。&lt;/p&gt;

&lt;p&gt;陈奕迅曾有一首《任我行》，听得我潸然泪下（陈奕迅有许多粤语歌都值得细细品味，尤其是林夕作词的，推荐你们听）。事实上，我只是歌首那位“半夜离队上山”的顽童。但有一天，曾渴望品尝真正自由的我，却会开始“忌讳空山无人”，突然“害怕遥望星辰”。神仙鱼横渡大海会断魂，而人在空山中亦会无处求生——到头来，还得随着大队走，没入有如羊群的人群中。&lt;/p&gt;

&lt;p&gt;我没有经历过，因而无法透析其中的原因，但从这首歌，我窥见了可能的未来。我不知自己何时会因现实引力落地，也许是三十岁，也许是四十岁，兴许是五十岁。但我知道，一旦轰然坠地，便难以再腾飞——除非在暮年，我又成为了一位顽童——但这需要精力，更需要勇气。因此我希望，在坠地后，我的回忆能与别人有些不同——最好，就是能像自己想的那样。迟暮之时，能够坐在黄昏中，眯眼望向残阳，任晚风吹拂脸庞，一遍遍地嗅着回忆，一次次咀嚼着曾经。我想，此生此行，亦就无憾了。&lt;/p&gt;

&lt;p&gt;我想普通地做人，但不想做一个普通人。&lt;/p&gt;

&lt;p&gt;就算终要回归羊群，我也要做一只有不同经历的羊。&lt;/p&gt;

&lt;p&gt;所以，在未来，我会照着自己的兴趣做事，也许会做一些你们完全无法理解的事——我不求你们理解，毕竟我们相隔三十年。同时，我也欢迎你们来批评我，劝阻我，我会尊重你们的意见—。但有一点，一定要理性——无论是你们，还是我。&lt;/p&gt;

&lt;p&gt;我想，这就是我要的未来。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>炫技？还是需求？</title>
   <link href="http://hsfzxjy.github.io//hobby-or-needs/"/>
   <updated>2015-10-04T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//hobby-or-needs</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;一款产品，其生命周期始于想法的萌发&lt;br&gt;
但其终结，无人能预测&lt;br&gt;
诚然，有些产品能够颠覆世界&lt;br&gt;
但更多的，只是湮灭在残酷的市场中&lt;br&gt;
甚至——&lt;br&gt;
有的只是一场白日梦&lt;br&gt;
连真正的出生都未曾经历    &lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h2&gt;闪念&lt;/h2&gt;

&lt;p&gt;“做一个云聊天平台。”&lt;/p&gt;

&lt;p&gt;尽管只是一刹那的念头，我却被深深地迷住了。&lt;/p&gt;

&lt;p&gt;一直都想拥有一款属于自己的&lt;strong&gt;真正&lt;/strong&gt;的产品——所谓&lt;strong&gt;真正&lt;/strong&gt;，即从设计，到开发，再到发布和运维都是自己独立完成。毕竟之前外包的社团网站，不过是练手的项目罢了，并不能给我带来足够的成就感。&lt;/p&gt;

&lt;p&gt;几个月前，我将博客迁移到了 Github Pages，从而接触到了&lt;strong&gt;多说&lt;/strong&gt;。多说 是一个社会化评论插件，通过在网页上插入代码，开发者可以将评论功能集成到自己的网站中。这个插件在国内使用十分广泛，无论是个人博客还是企业网站，随处可见它的身影。事实上，这里边已经有了些许&lt;strong&gt;云&lt;/strong&gt;的概念——其本质就是 SaaS（Software as a Service）。&lt;/p&gt;

&lt;p&gt;之前在给模联的外包网站中，我曾实现了一个网页版的聊天系统。经过了两个版本的沉淀，其功能已趋于稳定。在开发的过程中，我也积累了许多相关的技术经验——可以说，我已基本了解并掌握了“网页聊天”这个技术栈。&lt;/p&gt;

&lt;p&gt;“那么，为什么不将网页聊天做成服务呢？”&lt;/p&gt;

&lt;p&gt;受&lt;strong&gt;多说&lt;/strong&gt;产品模式的启发，我萌发了一个想法。&lt;/p&gt;

&lt;p&gt;“云聊天平台”，项目就此开始。&lt;/p&gt;

&lt;h2&gt;设计&lt;/h2&gt;

&lt;h3&gt;v0.0.1(alpha) 社会化的聊天插件&lt;/h3&gt;

&lt;p&gt;这是我最初的想法。&lt;/p&gt;

&lt;p&gt;在这个版本中，产品的功能被定位为 &lt;strong&gt;交流&lt;/strong&gt;。平台提供聊天功能的入口脚本，开发者可以利用其给网页集成聊天功能，用户可以用社交账号自由登陆聊天系统，与同时浏览该网页的其他用户交流看法。&lt;/p&gt;

&lt;p&gt;很浓的&lt;strong&gt;多说&lt;/strong&gt;的气息，不是吗？灵感出自多说，自然有着多说的影子。&lt;/p&gt;

&lt;p&gt;这个想法很快便被否决了，原因如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;交流&lt;/strong&gt; 这个功能，现有的评论机制已经基本能满足。无论是用户与用户之间的互动，还是评论的实时更新，都已有了成功的案例。若是将其替换成聊天，并不会有多少功能上的创新，无非是增添了新鲜感罢了。风头一过，很快便会衰落。&lt;/li&gt;
&lt;li&gt;从 Web 1.0 时代起就有了 评论 这种机制，在十几年的时间中，用户已形成了固有的使用习惯。用新的使用习惯去冲击传统，个人觉得，成功的可能性不大。&lt;/li&gt;
&lt;li&gt;除了”吐槽“，用户也需要”分享“，这和产品的定位相悖。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;v0.1.0(final) 高度可定制的云聊天平台&lt;/h3&gt;

&lt;p&gt;将产品定位仅局限在”交流“，未免太小气了些。要做，就要做大。&lt;/p&gt;

&lt;p&gt;在最终的版本里，产品的功能被泛化。平台仅提供”聊天“的基础服务——这是可定制的服务，从用户系统，到界面都是可重写的，甚至还可以利用插件扩展其功能。聊天功能也不仅局限在网页中，开发者可以使用 WebView 实现其对 移动 App 的支持。至于聊天功能的用途，开发者可以自行决定。&lt;/p&gt;

&lt;p&gt;有些大企业的味道了，我甚至能想象到自己赚得盆满钵满的样子。（=_=!）&lt;/p&gt;

&lt;p&gt;确实，这是一个极好的入手点。一旦产品成型，成功的几率会很大。&lt;/p&gt;

&lt;p&gt;接下来，便要进行一些相关的调查。&lt;/p&gt;

&lt;h2&gt;调查&lt;/h2&gt;

&lt;p&gt;用 Google 查询”云聊天平台“，我发现已经有了同类的产品，而且还有不少。&lt;/p&gt;

&lt;p&gt;其中做的不错的，莫过于 &lt;a href=&quot;http://www.rongcloud.cn/&quot;&gt;融云即时通讯云&lt;/a&gt;。该产品出现于 2014 年，服务范围覆盖 Android、iOS 以及 Web 平台，功能上支持 单聊、群聊、语音视频聊天，同时也是高度可定制的。同时对于聊天、客服平台等常见的应用场景，也有完善的解决方案。如今已占有了七成以上的即时通讯市场。&lt;/p&gt;

&lt;p&gt;此外，还有&lt;a href=&quot;http://www.yuntongxun.com/api/im/imFunction#point_box&quot;&gt;融联云通讯&lt;/a&gt;。这是一家实力雄厚的企业，除了提供即时 IM 服务，还有 视频通话、呼叫中心等产品。&lt;/p&gt;

&lt;p&gt;至于在网页客服平台领域，相关的产品简直数不胜数。它们大多都有了一定的技术积淀。&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;一番调查下来，结果是令人失望的。如果只是作为个人项目，云聊天平台 成功的可能性微乎其微。和那些大企业相比，我的技术实力无异于以卵击石。&lt;/p&gt;

&lt;p&gt;没办法，项目的构想到此为止吧。&lt;/p&gt;

&lt;h2&gt;反思&lt;/h2&gt;

&lt;p&gt;“颠覆性的产品”，有着宏伟的蓝图，却在动工之前便夭折了。&lt;/p&gt;

&lt;p&gt;事后，再回想，那产品真的会是颠覆性的吗？未必。市场上已有了诸多相当成熟的同类产品，一个老旧的 idea，没有亮点的 idea，很难有立足之地。&lt;/p&gt;

&lt;p&gt;但在那引以为傲的灵感迸发之初，我却完全不是这么想的。&lt;/p&gt;

&lt;p&gt;对所谓“灵感”的痴迷，说到底，还是由于 Websocket 技术。2013 年那会儿，新浪云的 Channel 服务刚刚公测——这是一个基于 Websocket 协议的网页实时推送服务，模联网站的聊天系统全靠它的技术支持。&lt;/p&gt;

&lt;p&gt;在当时看来，这项技术简直是神一般的存在。同时，业界也有人在大力宣传这项技术，声称“它会颠覆 Web 世界”。&lt;/p&gt;

&lt;p&gt;既然是一项“颠覆世界”的技术，我自然也不肯将其局限在一个外包网站中。它应该属于一款“颠覆性”的产品。直到遇到了 多说，一个“伟大”的想法便产生了。&lt;/p&gt;

&lt;p&gt;简而言之，这个“伟大的想法“，源自 &lt;strong&gt;不满足于自己所掌握的技术的应用&lt;/strong&gt;——或者说：就是想炫技。&lt;/p&gt;

&lt;p&gt;如果这只是一个练手的项目，倒也无可厚非。花上一两个星期将其实现出来，放到云平台上运行，再找几个朋友”体验“一下，好强心很快可以得到满足。至于项目的后续维护，你无需理会——反正，又不用靠它来吃饭。&lt;/p&gt;

&lt;p&gt;但这不是一个 demo，是一个互联网产品，是要面向真正的用户的，是要进入市场的。&lt;/p&gt;

&lt;p&gt;我知道，我并不是个案。还有许许多多的创业者，他们做一款产品的理由，只是他们想做这款产品——当然了，他们大部分都和我一样，在白日梦阶段便停止了。&lt;/p&gt;

&lt;p&gt;产品，最重要的是要贴合用户的需求。真正的产品，都是先经过周密的市场调查分析，得出用户需求取向，再进行下一步的设计。而用来炫技的产品，则恰好反其道而行之：先设计产品，再去迎合市场。&lt;/p&gt;

&lt;p&gt;也许你会说：诺基亚当年风生水起时，用户的需求取向肯定不是触屏无键盘智能手机，但乔布斯不是照样发布 iphone 吗？而且，如果没有一些特立独行的人去开发新需求，科技又怎能进步呢？&lt;/p&gt;

&lt;p&gt;诚然，这个市场总是需要一些东西去冲击其固有的需求。乔布斯做过，扎克伯格也做过，他们在一定程度上都扭转了市场的走向。但无论是 iphone 还是 facebook，都不是因为决策者灵光一闪而诞生的。很多用户不知道自己想要什么，但产品经理可以通过分析特定领域的市场状况，“猜”出用户将来可能需要什么，并付诸于行动。当然，也有一些“极为创新”的产品，误打误撞获得了成功，但那只是极少数而已。&lt;/p&gt;

&lt;p&gt;当然，Google 除外。公众常常能看到 Google 在干一些奇怪的事情，比如用热气球提供 wifi，开发智能眼镜、智能汽车等高端产品。这些项目有九成都是失败的，从而给人带来一种感觉：Google 的决策者们并不懂市场需求。&lt;/p&gt;

&lt;p&gt;事实上，Google 无需理会市场需求，它只是在做自己喜欢的事情而已。这些“然并卵”的产品，有许多真的是设计师灵光一闪而成型的，都是些“未来型”的科技产品，本来就没打算在这个时代赢得多少市场。可以说，Google 在尝试给未来的科技发展提供多种可能的方向。即便是失败了，也无妨，反正这只是一个异想天开。&lt;/p&gt;

&lt;p&gt;这种超常的自信，源于 Google 雄厚的资本积累。Google 几乎垄断了全世界的搜索引擎市场，每季度仅靠投放广告赚的钱便可以维持运转。而搜索引擎并不需要很短的迭代周期，因此 Google 有充足的时间和金钱来做自己喜欢做的事情。&lt;/p&gt;

&lt;h2&gt;后记&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;我有一个很好的 idea，产品做出来肯定会震惊世界的——就只差一个程序员了。
&lt;cite&gt; ——一个在业界广为流传的笑话 &lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;能不能震惊世界，并不是由你说了算。你想做的，并不一定是用户想要的。但有一点：&lt;strong&gt;得用户者得天下&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;&lt;em&gt;谨以此文，警示将来的自己以及众多踌躇满志的创业者&lt;/em&gt;&lt;/mark&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>【译】响应式图片的现状</title>
   <link href="http://hsfzxjy.github.io//the-state-of-responsive-images-in-2015/"/>
   <updated>2015-09-19T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//the-state-of-responsive-images-in-2015</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://www.webdesignerdepot.com/2015/08/the-state-of-responsive-images/&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2015/08/featured_images1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Web 是一种可视化的媒体。绚丽的视觉效果，很大程度上离不开图片文件所作出的贡献。虽然（Whilst）其中的许多效果都可以用 CSS 和 内联 SVG 来实现，互联网上的许多站点仍需要图片文件。&lt;/p&gt;

&lt;p&gt;从去年的统计来看，每个站点中，图片平均占了一半的页面体积，并且随着时间的推移，图片体积有持续增加的趋势；就 2014 年而言，图片的大小便增长了 &lt;strong&gt;21%&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;与此同时，互联网终端的种类、数量也在增长。从 72 ppi（市场份额正在下降）到 600 ppi，不同设备的分辨率（resolution）有着天壤之别。&lt;/p&gt;

&lt;p&gt;创建能在任何设备中都有着高质量的图片，其实再容易不过了——用 1000 ppi 的质量保存图片，然后就可以不用再理他了（译者注：原文是 call it a day）。生成的图片，即使是在分辨率最高的设备上查看也是十分清晰的（crisp）。但是，在图片质量提升的同时，图片文件的大小也会相应地增加。要知道，&lt;strong&gt;页面加载时间&lt;/strong&gt;可是影响用户体验的&lt;strong&gt;首要因素&lt;/strong&gt;——因此，保证站点能够及时地呈现在用户面前是我们义不容辞（incrumbent）的责任。高质量的图片，即使是在宽带环境下加载也要耗费几十秒，更不用说（let alone）是移动端的设备了——简直就是无法使用。&lt;/p&gt;

&lt;p&gt;响应式图片的目的，不是要为设备提供尽可能高质量的图片（这一点，我们很容易做到），而是要为设备提供它所能支持的最高质量的图片，仅此而已（nothing more）。&lt;/p&gt;

&lt;p&gt;从这篇指南中，你将了解到响应式图片的工作原理（what works），响应式图片仍然存在的问题和陷阱（pitfall），以及如何将响应式图片运用到网站中。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;我能感受到这欲望，对速度的渴求&lt;/h2&gt;

&lt;p&gt;为什么速度这么重要？难道还有人在用 3G 网络吗（译者注：歪果仁科技发达，早已看不起 3G 网络）？如果你的目标客户都住在曼哈顿市中心，为什么还要为莱索托的乡巴佬担心呢（译者注：南非山区）？ 事实上，“每个人都能用上超快的宽带，用上由那些利欲熏心的公司提供的宽带”——听起来就像个神话。&lt;/p&gt;

&lt;p&gt;每个人每天都要耗费至少两个小时在恶劣的（inferior）网络环境中。就我而言，在挤公交上下班时（commuting），我常常会上网以打发无聊的时光——每当这时，稳定的 3G 网络听起来都像是遥不可及的美梦。&lt;/p&gt;

&lt;p&gt;今年四月的时候，&lt;a href=&quot;http://googlewebmastercentral.blogspot.co.uk/2015/04/rolling-out-mobile-friendly-update.html&quot;&gt;Google 声称&lt;/a&gt;“‘移动设备友好性’将会成为移动站点的排名因素“。甚至，在此之前，&lt;a href=&quot;http://googlewebmastercentral.blogspot.co.uk/2011/03/introducing-page-speed-online-with.html&quot;&gt;加载速度也是一个重要的排名因素&lt;/a&gt;——无论是显式地体现在 Google 的统计中，抑或是隐式地成为影响网站跳出率（bounce rate）的一个重要因素。&lt;/p&gt;

&lt;p&gt;对于两个相近的站点，1Kb 的冗余数据，都可能将你的 Google 排名从第三降到第四、第五，甚至是第十、第十一——换言之，从第一页降到了第二页——这会给你的收入（revenue）带来不小的冲击。&lt;/p&gt;

&lt;h2&gt;你真的需要这图片吗？&lt;/h2&gt;

&lt;p&gt;图片优化的最高境界便是：没有图片。你的站点上有五张图片，去掉一张，你便节省了 20%——或许更重要地，你节省了一次 HTTP 请求。如果你将五张图片都去掉了，那你就节省了 100%，以及所有的 HTTP 请求。因此，何乐而不为呢？&lt;/p&gt;

&lt;p&gt;然而，我们并不会这么做——毕竟在短期内，图片比文字更有感染力。它们能和用户建立一种”感情通道“，从而使用户被站点的内容所吸引。&lt;/p&gt;

&lt;p&gt;要知道，&lt;a href=&quot;http://www.nngroup.com/articles/how-little-do-users-read/&quot;&gt;用户从来不读网页&lt;/a&gt;——只有极少数人会深入阅读站点上的内容。图片能让我们在很短的时间（a fraction of time）内了解一个品牌，深深地记住它（reinforce）——这是文字做不到的。&lt;/p&gt;

&lt;p&gt;也许，图片的体积会很大，加载起来显得很笨重。然而一旦被浏览器渲染出来，和文字相比，它们能够更有力地抓住用户的眼球，更高效地传达品牌信息。&lt;/p&gt;

&lt;p&gt;而响应式图片，就是为了更好地把握住这来之不易的”感情通道“，以防不耐烦的用户点击点击了”后退“按钮。&lt;/p&gt;

&lt;h2&gt;那么，SVG 又怎么样呢？&lt;/h2&gt;

&lt;p&gt;SVG（可缩放矢量图像）是 Web 发展史上的一大创举。它引领着潮流（ahead of the curve），至今大多数设计师依旧没有意识到其真正的潜力。&lt;/p&gt;

&lt;p&gt;SVG ——正如它的名字所描述——是基于矢量的。这意味着 SVG 图像是由点、角和直线构成的。SVG 同时也是——正如它的名字所描述——是可缩放的，这意味着在 5k iMac 和 Android 智能手机上，它会表现得同样出色——没有质量的损失，也没有体积的差别。&lt;/p&gt;

&lt;p&gt;如果你需要一张平面插图（flat illustration），一个图标，一个 logo 以及其他所有能够以 SVG 的形式显示出来的东西，SVG 是不二之选（the way to go）。&lt;/p&gt;

&lt;p&gt;Web 上大多数图片都是位图。一般来说，位图的工作原理就是将每个像素点依次描述出来，包括它们的颜色（RGB 的形式，即 红、绿、蓝值），以及透明度（在某些场景下）。如果你有一张尺寸为 100px × 100px 的图片，那么它将有 10000 个像素点。如果每个像素点都用 4 个值来描述，那么这张图将等同于 40000 bits 的数据。听起来很多，不是吗？然而有时，它们的体积会比矢量图还要小。&lt;/p&gt;

&lt;p&gt;考虑 1px × 1px 的图片，若使用位图，则需要 4 bits 来记录（红、绿、蓝，以及透明度）。现在考虑用矢量的形式来记录相同尺寸的图片：除了 RGBA 颜色值之外，还需要矩形的左上角坐标、长度和宽度这几个量。&lt;/p&gt;

&lt;p&gt;这都是些极端的（crude）情况，但它们是准确的。通常，如果一幅图片的矢量版本——假使有的话——比同样的（equivalent）位图占用的体积还要多，那么位图是唯一合理的选择。&lt;/p&gt;

&lt;h2&gt;（错误地）使用 Javascript&lt;/h2&gt;

&lt;p&gt;正如生活中的许多问题（如果你的生活是在网络上的话），响应式图片也可以用 Javascript 来解决。事实上，在过去的许多年中，Javascript 是解决这个问题的唯一途径。通过对 User Agent 进行测试，Javascript 可以知道当前的浏览器类型，然后将指向合适的图片地址的 &lt;code&gt;image&lt;/code&gt; 标签输出到页面上。&lt;/p&gt;

&lt;p&gt;有些 Web 设计师反对这么做，理由是：&lt;a href=&quot;https://gds.blog.gov.uk/2013/10/21/how-many-people-are-missing-out-on-javascript-enhancement/&quot;&gt;有些人会关闭 Javascript 功能&lt;/a&gt;。然而，这种情况已经非常少见了，尤其是在移动设备中。尽管如此，这种方法仍存在着一些问题——比如，这种图片不会被搜索引擎机器人解析出来，而且只有当脚本执行后图片才会被加载出来。&lt;/p&gt;

&lt;p&gt;事实上，使用 Javascript 最大问题是：这是一种有悖于 Javascript 主要目的的使用方式。HTML 管理数据，CSS 处理表现形式，而 Javascript 负责功能实现。当我们违背了这些既定规则时，我们就会遇到各种各样的问题，遇到需要”奇技淫巧“（hack）来解决的问题。图片的本质是数据，因此应该交由 HTML 来处理。&lt;/p&gt;

&lt;h2&gt;浏览器的问题&lt;/h2&gt;

&lt;p&gt;从 RWD （响应式网页设计，Responsive Web Design）提出至今，图片都是最大的绊脚石（stumbling block）。然而现在，我们要开始寻找方法来解决这各种各样的问题了。能够被称为”最佳实践“的，都是那些久经沙场的（battle-hardened）、有足够成功案例的技术。专业的（dedicated）开发者已经牺牲了自己的时间去去游说（lobby） W3C，以求获得官方的解决方案。而现在，响应式图片第一次成为了可能。&lt;/p&gt;

&lt;p&gt;响应式图片的关键，在于它充分地意识到了 Web 的失败之处。为保证响应式图片不会使浏览器崩溃，设计者们早已考虑得十分周到——即使对于不支持响应式图片的浏览器，代码也不会报错，而是向用户展示一张默认的、非响应式的图片。&lt;/p&gt;

&lt;p&gt;在这篇文章中，我们将见到两个官方的响应式图片标签：&lt;code&gt;srcset&lt;/code&gt; 以及 &lt;code&gt;picture&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;截至目前，Edge、Safari 和 iOS Safari 只支持 &lt;code&gt;srcset&lt;/code&gt; 的一部分特性。Firefox、Chrome、Opera、Android 内置浏览器以及下一个版本的 Safari 和 iOS Safari 都将会完整地支持它。（我们会在下文讨论它们的区别）&lt;/p&gt;

&lt;p&gt;而 &lt;code&gt;picture&lt;/code&gt; 元素，已经被 Firefox、Chrome、Opera 以及 Android 内置浏览器完美支持。Edge、Safari 和 iOS Safari 则完全不支持，并且暂时也没有实现它们的打算。&lt;/p&gt;

&lt;p&gt;由于不同厂商解析 W3C 特性的方法不同，即使是在兼容它们的浏览器中，也有一些不一致的地方。例如，当你使用 viewport 的大小来区分不同的设备时，有些浏览器会在 viewport 比小图片大 1px 时便将小图切换为大图，而另外一些则在 viewport 完全符合大图显示条件时才会这么做。&lt;/p&gt;

&lt;p&gt;总之，浏览器可以分为两大阵营：想要图片质量尽可能高的 以及 想要图片体积尽可能小的。浏览器厂商都在各自推崇（duking）自己的主张，直到某一方的实现被大众所认可——个人而言我喜欢后者，因为它认为性能对用户体验而言更加关键。&lt;/p&gt;

&lt;p&gt;至于现在，Web 设计人员的最佳选择就是：坚持 W3C 标准，而不要对浏览器作额外的猜测。毕竟，浏览器的默认体验（高质量 或是 高性能）是由用户选择的默认浏览器决定的——因此，如果用户意识到这其中的区别，那么用户的偏好就最有可能成为浏览器的偏好（译者注：这里怪怪的）。&lt;/p&gt;

&lt;h2&gt;响应式图片最佳实践（2015）&lt;/h2&gt;

&lt;p&gt;纵观 Web 的历史，我们曾经用一个标签来表示图片：&lt;code&gt;img&lt;/code&gt; 标签。在 HTML5 中，&lt;code&gt;img&lt;/code&gt; 的角色经历了（undergone）一些微妙（subtle）的变化——它被设计成响应式图片的开关，即其不再代表一张图片，而只是响应式图片的占位符。&lt;/p&gt;

&lt;p&gt;这其中的区别十分重要。曾经，&lt;code&gt;img&lt;/code&gt; 标签只能持有一副图片的数据（位图 或 矢量图）——而现在，它能持有多幅图的数据。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;img&lt;/code&gt;标签看起来是这样的（概括（recap）给非开发者）：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;img&lt;/code&gt; 标签的响应式版本看起来是这样的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;仅仅（Barely）只有一些区别而已。仔细看代码，你会注意到一件重要的事情：&lt;strong&gt;代码是向后兼容的&lt;/strong&gt;。如果一个浏览器不能理解 &lt;code&gt;srcset&lt;/code&gt; 属性，它会简单地忽略它，并按照 1993 年的原始标准进行渲染。&lt;/p&gt;

&lt;p&gt;这意味着：我们能通过标记来使用响应式图片，而不需要对相关特性进行检测。&lt;/p&gt;

&lt;p&gt;在新的响应式 &lt;code&gt;img&lt;/code&gt; 标签中， 原则上 &lt;code&gt;src&lt;/code&gt; 属性只是为不支持 &lt;code&gt;srcset&lt;/code&gt; 的浏览器指定了默认的图片地址，而 &lt;code&gt;srcset&lt;/code&gt; 属性则包含了用于适配各种分辨率的图片信息。&lt;/p&gt;

&lt;p&gt;在渲染 &lt;code&gt;img&lt;/code&gt; 标签是时，浏览器会自己决定出最适合的图片文件。&lt;/p&gt;

&lt;h3&gt;使用 srcset&lt;/h3&gt;

&lt;p&gt;既然我们已经知道 &lt;code&gt;srcset&lt;/code&gt; 在不兼容的浏览器中会静默失败，我们便可以子有底增加图片了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image-b.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image-a.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个例子中，任何支持 &lt;code&gt;srcset&lt;/code&gt; 的浏览器将会显示 &lt;code&gt;image-b.jpg&lt;/code&gt;，而任何不支持的浏览器则会显示 &lt;code&gt;image-a.jpg&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;重要的是，你要知道浏览器只会下载它想要显示的图片，而并不会将所有图片都加载出来后再进行选择。&lt;/p&gt;

&lt;p&gt;遗憾的是，我们并没有任何进步——除非我们是在展示 &lt;code&gt;srcset&lt;/code&gt; 属性的使用，仅靠 &lt;code&gt;srcset&lt;/code&gt; 的支持与否来加载图片并没有什么实际的应用。&lt;/p&gt;

&lt;p&gt;解决方法就是：为浏览器提供更多的信息，让其知道自己该选择那一张图片。为了做到这一点，我们需要提供和图片的 像素密度（pixel density） 以及 可用空间（available space） 相关的信息。&lt;/p&gt;

&lt;h3&gt;使用 x 描述符&lt;/h3&gt;

&lt;p&gt;x 描述符能够让浏览器知道图片的像素密度。&lt;/p&gt;

&lt;p&gt;举个例子，如果你想要提供一张两倍像素于标准图片的 视网膜级的（retina-grade）的图片，你需要在 &lt;code&gt;srcset&lt;/code&gt; 中做出说明：在文件名后加上 &lt;code&gt;2x&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这是我们的图片：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了给浏览器增添一个视网膜选项，我们将作出如下修改：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 2x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个案例中，有三个可能的结果：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果浏览器不支持 &lt;code&gt;srcset&lt;/code&gt;，则 &lt;code&gt;src&lt;/code&gt; 所定义的图片将会被使用。&lt;/li&gt;
&lt;li&gt;如果浏览器支持 &lt;code&gt;srcset&lt;/code&gt; ，并且屏幕能够胜任两倍的分辨率，则 &lt;code&gt;srcset&lt;/code&gt; 所定义的图片将会被采用&lt;/li&gt;
&lt;li&gt;如果浏览器支持 &lt;code&gt;srcset&lt;/code&gt;，但是没有足够高的分辨率，&lt;code&gt;src&lt;/code&gt; 所定义的图片将会被采用（在 &lt;code&gt;srcset&lt;/code&gt; 没有定义 &lt;code&gt;1x&lt;/code&gt; 图片的情况下，&lt;code&gt;src&lt;/code&gt; 属性会被视为这种情况下的选项）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;浏览器支持是良好的，并且在飞快地改进中。只用一个属性，我们就解决了响应式图片的难题（conundrum），真棒！&lt;/p&gt;

&lt;p&gt;最后，关于 x 描述符，值得注意的是：图片的选择是基于像素密度的。故如果一个用户将浏览器缩放至 200%（等效于将图片大小减半，将像素密度加倍），2x 图片将会被加载。这会对 无障碍访问设备（accessibility）造成一些不利（detrimental）的影响——我们当然不希望在视力受损者访问网站时加载速度下降，而仅仅是因为他们缩放了网页。&lt;/p&gt;

&lt;h3&gt;使用 w 描述符&lt;/h3&gt;

&lt;p&gt;w 描述符比 x 描述符稍微先进一些。w 描述符的工作原理是：对于一个特定的图片选项，它会告诉浏览器 x 轴上的实际像素有多少（即宽度）。&lt;/p&gt;

&lt;p&gt;截止写作时，Edge，Safari 以及 iOS Safari 尚不支持 w 描述符，这在某些程度上削弱了它的实用性。&lt;/p&gt;

&lt;p&gt;让我们回到原来的图片：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假设在本地时，这张图片的宽度是 1600 像素，现在我们想要新增一张视网膜级的图片。正如 x 描述符，我们将在 &lt;code&gt;srcset&lt;/code&gt; 中定义宽为一张 3200 像素的图片：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 3200w&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;w 描述符最大的毛病（gotcha）就是：尽管在使用 x 描述符时， &lt;code&gt;src&lt;/code&gt; 属性被视为默认选项，在支持 &lt;code&gt;srcset&lt;/code&gt; 的浏览器上使用 w 描述符时它却会被忽略。在使用 w 描述符时，我们只能显示地定义默认图片：加上第二个 &lt;code&gt;srcset&lt;/code&gt; 图片选项，用逗号分隔：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 3200w, image.jpg 1600w&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导致有代码洁癖的我们要去使用……&lt;/p&gt;

&lt;h3&gt;使用多幅图片&lt;/h3&gt;

&lt;p&gt;能够在 HTML 代码中为浏览器提供高分辨率图片选项，确实很酷——然而，就像你所猜测的那样，当我们指定多幅图片时，事情会变得更酷。&lt;/p&gt;

&lt;p&gt;响应式图片的目的，就是为了给不同的设备提供尽可能高质量的图片，而不要存在任何冗余。简单地提供一张高质量的图片还不够，我们需要提供更多的选择——比如 1x、1.5x、2x、2.5x 和 3x 的。&lt;/p&gt;

&lt;p&gt;再回过头来，这是我们的原始定义：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，我们为浏览器提供了一个视网膜级的选项：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 2x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而在这一次，我们会提供更多的额外选项，我们用逗号分隔它们：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;huge-image.jpg 3x, retina-image 2x, moderate-image 1.5x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于对于不同的人而言，关键字有着不同的意思，我建议根据 x 描述符来为图片命名，这样更有助于人脑的记忆，同时也更容易确定各个图片的尺寸以及让团队中的成员更加清楚：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image_3x.jpg 3x, image_2x.jpg 2x, image_1-5.jpg 1.5x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要记住：我们并没有告诉浏览器应该选择哪一幅图片，我们只是将可用的选项告诉了它，并允许它自行选择。浏览器只会下载其中的一副图片。&lt;/p&gt;

&lt;p&gt;在使用多幅图片时有一个问题：永远不要为一幅图片定义两种描述符——举个例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cross-the-streams.jpg 2x, cross-the-streams.jpg 3200w&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=jyaLZHiJJnE&quot;&gt;这会很不好&lt;/a&gt;……&lt;/p&gt;

&lt;h3&gt;使用 sizes&lt;/h3&gt;

&lt;p&gt;除了定义格式，&lt;code&gt;sizes&lt;/code&gt; 属性是相当有趣的，因为 &lt;code&gt;sizes&lt;/code&gt; 属性的值是相对于 viewport 而言的，而不是图片本身。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;vw&lt;/code&gt; （viewport width），我们以相对于浏览器宽度的方式指定了图片区域——记住，&lt;code&gt;img&lt;/code&gt; 标签现在只等效于一个占位符，因此我们不是在指定图片的实际尺寸，而是在指定包含图片的占位符的尺寸。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;100v&lt;/code&gt; 就是 100% 的 viewport 宽度， &lt;code&gt;50vw&lt;/code&gt; 就是 50% 的 viewport 宽度，&lt;code&gt;25vw&lt;/code&gt; 就是 25% 的 viewport 宽度……以此类推。&lt;/p&gt;

&lt;p&gt;如果我们想让 &lt;code&gt;img&lt;/code&gt; 的宽度达到浏览器宽度的一半，我们可以这样：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sizes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;50vw&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 2x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这并不是特别有用，直到我们将它和 media query 结合起来……&lt;/p&gt;

&lt;h3&gt;使用 media query&lt;/h3&gt;

&lt;p&gt;当我们将 &lt;code&gt;sizes&lt;/code&gt; 属性和 media query 相结合时，它会变得越来越强大。我们可以用逗号分隔多个 viewport 宽度，并通过 CSS 风格的 media query 告诉浏览器该使用哪一个。&lt;/p&gt;

&lt;p&gt;举个例子，想象我们需要这么一张图片：在大多数的设备上它将占用 80% 的浏览器宽度，但在宽度小于等于  380px 的小尺寸设备（手机）上，我们想让它充满所有的空间（100% 的宽度）。我们应该这么写：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sizes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(max-width: 380px) 100vw, 80vw&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 2x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据这个逻辑，任何视口宽度小于等于 380px 的浏览器会让图片充满 100% 的视口。其他的浏览器则会导致 media query 返回 &lt;code&gt;false&lt;/code&gt;，从而采用另外的值——在这个例子中，即 &lt;code&gt;80vw&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一般说来（As a general rule），我对在 HTML 使用 media query 表示十分反感。只是因为响应式图片数据是属于 HTML 的（不是 Javascript），而 media query 却是属于 CSS 的（不是 HTML）。但是，如果你需要，这也不失为一个选择。&lt;/p&gt;

&lt;h2&gt;响应式图片的最佳实践（2016？）&lt;/h2&gt;

&lt;p&gt;我不知道你是怎么想的，但我确实为 &lt;code&gt;srcset&lt;/code&gt; 带来的改变感到兴奋。这是一个复杂问题的一个简单的解决方案，并且似乎提供了我们所需的所有东西。&lt;/p&gt;

&lt;p&gt;但是，就像公交车一样，你为了响应式图片的官方解决方案等待了 20 年，而且一上场就有两个。除了 &lt;code&gt;img&lt;/code&gt; 标签的 &lt;code&gt;srcset&lt;/code&gt; 属性，我们还有 &lt;code&gt;picture&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;picture&lt;/code&gt; 标签是另外一种占位符——尽管（albeit）是较为传统的一种。它被设计为 HTML5 中 &lt;code&gt;audio&lt;/code&gt; 和 &lt;code&gt;video&lt;/code&gt; 标签的模仿者（mimic），因此，它的语法被大多数人所熟识。当你需要更多 &lt;code&gt;srcset&lt;/code&gt; 不能提供的功能时，建议你使用 &lt;code&gt;picture&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;遗憾的是，&lt;code&gt;picture&lt;/code&gt; 的浏览器支持比 &lt;code&gt;srcset&lt;/code&gt; 更差，并且&lt;strong&gt;它不会静默失败&lt;/strong&gt;。&lt;/p&gt;

&lt;h3&gt;使用 picture&lt;/h3&gt;

&lt;p&gt;这是图片的原始定义：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一副嵌套在 &lt;code&gt;picture&lt;/code&gt; 中的图片：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;code&gt;picture&lt;/code&gt; 标签中，我们也可以为 &lt;code&gt;img&lt;/code&gt; 标签指定 &lt;code&gt;srcset&lt;/code&gt; 属性：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 2x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用 source 标签&lt;/h3&gt;

&lt;p&gt;在没有增加 &lt;code&gt;source&lt;/code&gt; 标签时，&lt;code&gt;picture&lt;/code&gt; 标签是死的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当选择所要展示的图片时，浏览器会从第一个 &lt;code&gt;source&lt;/code&gt; 标签开始遍历，直到找到一个 &lt;code&gt;media&lt;/code&gt; 值为 &lt;code&gt;true&lt;/code&gt; 的 &lt;code&gt;source&lt;/code&gt; 标签为止。该 &lt;code&gt;source&lt;/code&gt; 标签的 &lt;code&gt;srcset&lt;/code&gt; 属性将会被采用。&lt;/p&gt;

&lt;p&gt;例如，我们可以为图片指定”肖像“（portrait）格式和”风景“格式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;orientation:landscape&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;horizontal-image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;orientation:portrait&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vertical-image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;甚至，我们可以用 x 描述符 和 w 描述符 来指定多幅图片：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;orientation:landscape&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-horizontal-image.jpg 2x, horizontal-image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;orientation:portrait&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-vertical-image.jpg 2x, vertical-image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;code&gt;sizes&lt;/code&gt; 属性中使用 media query 时，我会质疑在 HTML 而不是在 CSS 中基于样式来控制图片的合理性。然而，如果你需要，&lt;code&gt;media&lt;/code&gt; 属性也不失为一种选择。&lt;/p&gt;

&lt;h3&gt;使用 type&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;picture&lt;/code&gt; 标签真正厉害的地方，在于它能从不同的图片类型中作出选择。&lt;/p&gt;

&lt;p&gt;想象我们现在有一张标准 PNG 图片，但我们想用 &lt;a href=&quot;https://developers.google.com/speed/webp/?hl=en&quot;&gt;WebP&lt;/a&gt; 格式去替换它，因为这会缩减 26% 的体积——记住，响应式图片的核心在于 用最小的数据量提供尽可能高质量的图片——然而目前它仅被 Chrome、Opera 和 Android 内置浏览器所支持。我们需要使用 &lt;code&gt;type&lt;/code&gt; 属性来确定 &lt;code&gt;WebP&lt;/code&gt; 格式是否被支持：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image/webp&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.webp 2x, image.webp 1x&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 2x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个案例中，浏览器会先检查是否支持 &lt;code&gt;WebP&lt;/code&gt; 格式。如果是，它会继续判断屏幕是否有足够的像素密度去显示 &lt;code&gt;retina-image,webp&lt;/code&gt; 图片，如果不是，则会显示 &lt;code&gt;image.webp&lt;/code&gt; 。倘若 &lt;code&gt;WebP&lt;/code&gt; 不被支持，浏览器将会径直跳至 &lt;code&gt;img&lt;/code&gt; 标签处并解析——这部分我们已经非常熟悉了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 属性的出现，意味着在环境支持的情况下，我们可以可以提供体积更小的图片格式。&lt;/p&gt;

&lt;h3&gt;已知的问题&lt;/h3&gt;

&lt;p&gt;在 IE9 中有一个已知的问题：&lt;code&gt;picture&lt;/code&gt; 标签将不会静默失败。为了处理 IE9 的情况，你需要欺骗 IE9，让它以为 &lt;code&gt;source&lt;/code&gt; 标签是 &lt;code&gt;video&lt;/code&gt; 标签的一部分：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;!—[if IE 9]&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;video&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;display:none;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;![endif]—&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image/webp&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.webp 2x, image.webp 1x&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;!—[if IE 9]&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;![endif]—&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;retina-image.jpg 2x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个丑陋的解决方案——但聊胜于无。我们只能期望 Windows10 的发布能够加速 IE9 退出市场，因为虽然 Edge 也不支持 &lt;code&gt;picture&lt;/code&gt; 标签，但至少它会用正确的方式来处理（静默失败）。&lt;/p&gt;

&lt;p&gt;当然，也有相应的 &lt;a href=&quot;https://scottjehl.github.io/picturefill/&quot;&gt;polyfills&lt;/a&gt; 来实现 IE 对 &lt;code&gt;picture&lt;/code&gt; 的兼容，但我的建议是去避免它。我从来不信任用 Javascript 打补丁，因为这会极大地影响性能，同时也让代码变得不可维护。&lt;/p&gt;

&lt;p&gt;出于这种原因，我建议现在还是最好不要使用 &lt;code&gt;picture&lt;/code&gt; 标签。除非，你在运营一个大规模的电子商务网站，由 &lt;code&gt;WebP&lt;/code&gt; 格式节省下来的下载时间实在不足以弥补因对代码打补丁所带来的不便。&lt;/p&gt;

&lt;p&gt;一旦 IE9 的市场份额降至 1% 以下——也许发生在明年的某一个时刻（译者注：歪果仁的看法不代表天朝的实际情况），&lt;code&gt;picture&lt;/code&gt; 标签就会变得可以接受（viable）。如果你在 2016 年读到这篇文章，或许，这种方案值得你去实践。&lt;/p&gt;

&lt;h2&gt;创建 响应式图片&lt;/h2&gt;

&lt;p&gt;位图并不会自己放大——这点和 SVG 不一样。面对这个问题，我们的解决方法是：使用 &lt;code&gt;srcset&lt;/code&gt; 或者是 &lt;code&gt;picture&lt;/code&gt;，从而为不同能力的浏览器提供不同的图片。因此，我们需要提供许多种不同尺寸的图片。&lt;/p&gt;

&lt;p&gt;许多图片编辑软件都实现了图片自动化多尺寸导出——无论使用何种软件，你都可以轻松获得各种尺寸的图片，而无需亲自逐一调整。&lt;/p&gt;

&lt;p&gt;Adobe Photoshop 是一款事实上的（de facto）位图编辑器。尽管对于设计工作者而言，它并不是一个很好的选择，但不可否认的是——用它来设计图片确实是一种享受（smooth &amp;amp; reliable）。在 Photoshop 中，多图输出的实现相对直接一些：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打开图片，并将其放在一个独立的图层上。 &lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2015/08/step_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;将图层重命名为你要生成的文件的名字（包括扩展名）&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2015/08/step_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;勾选 文件 -&amp;gt; 生成 -&amp;gt; 图片资源，然后 Photoshop 会在 PSD 文件旁生成一个新目录，其中有生成好的图片。&lt;/li&gt;
&lt;li&gt;再次重命名图层，在每个文件名前加上对应的缩放尺寸。一旦图层被重命名，对应的图片便会自动生成，因此不必重复 步骤3。&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2015/08/step_4.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;（图片版权归 &lt;a href=&quot;http://www.freeimages.com/photo/bikes-1447404&quot;&gt;Philip Collier&lt;/a&gt; 所有）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;若想了解更多关于 使用 Photoshop 生成图片 的知识，请点击 (这里)[https://helpx.adobe.com/photoshop/using/generate-assets-layers.html)。&lt;/p&gt;

&lt;p&gt;基于这些图片，我们便可以给浏览器提供 5 种选择：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bikes_3x.jpg 3x, bikes_2-5x.jpg 2.5x, bikes_2x.jpg 2x, bikes_1-5x.jpg 1.5x&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bikes_1x.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;img&lt;/code&gt; 标签已经度过了漫长的 20 个春秋——或者更精确地说，在伴着缺点（inadequate）缓慢行进了 18 年后，&lt;code&gt;img&lt;/code&gt; 标签在最后的两年突然“奋起直追”，直到变成今天这个相对复杂（sophisticated）的样子。&lt;/p&gt;

&lt;p&gt;当然最重要的是：&lt;strong&gt;我们找到了解决方案&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;迄今为止，在 &lt;code&gt;srcset&lt;/code&gt; 和 &lt;code&gt;picture&lt;/code&gt; 这两个可选项中，前者的浏览器支持相对比较完善。如果你的网站已经完成了 95%，&lt;code&gt;srcset&lt;/code&gt; 的高级特性及其简洁的实现将是你的不二之选。&lt;/p&gt;

&lt;p&gt;如果你在运营一个庞大的电子商务网站，有成千上万的产品图片需要显示，最佳的实践便是使用 WebP 格式的图片——随着 &lt;code&gt;picture&lt;/code&gt; 元素的支持被不断完善，这一切的付出都是值得的。&lt;/p&gt;

&lt;p&gt;浏览器无法依据当前的网络状况来选择适合的图片——这是现有解决方案最大的缺点。这不是我们所能左右的。在当下，我们只能祈求“好马配好鞍”了。&lt;/p&gt;

&lt;p&gt;用最小的尺寸提供最高质量的图片，终于成为了可能。这意味着：在不久的将来，我们将能拥抱（embrace）更好的用户体验。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（图片引用：&lt;a href=&quot;http://www.shutterstock.com/pic-84977458.html&quot;&gt;mountains&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://www.shutterstock.com/pic-116864680.html&quot;&gt;devices&lt;/a&gt;，来自 Shutterstock）&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>【译】“为什么有这么多的编程语言？”</title>
   <link href="http://hsfzxjy.github.io//why-are-so-many-programming-languages/"/>
   <updated>2015-09-18T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//why-are-so-many-programming-languages</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://blog.stackoverflow.com/2015/07/why-are-there-so-many-programming-languages/&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在过去的一周中，几位同事曾两次问了我这个问题。听起来，这像是一个糟糕的问题，但事实上并不是这样的。&lt;/p&gt;

&lt;p&gt;最简短的答案就是：&lt;strong&gt;尽管我们并不需要这么多语言，但我们还是想要（want）它们&lt;/strong&gt;。让我们再探索得更深一些吧。&lt;/p&gt;

&lt;h2&gt;难道它们不都是一样的吗？&lt;/h2&gt;

&lt;p&gt;某种意义上（In a sense），是的。创建一个网站，你可以使用 &lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt;、&lt;code&gt;C#&lt;/code&gt;、&lt;code&gt;Go&lt;/code&gt; 抑或是 &lt;code&gt;Javascript&lt;/code&gt;。甚至，你可以使用 &lt;code&gt;C&lt;/code&gt; 或 &lt;code&gt;C++&lt;/code&gt; 或 &lt;code&gt;Haskell&lt;/code&gt; 或 &lt;code&gt;Rust&lt;/code&gt; 或 &lt;code&gt;COBOL&lt;/code&gt; 或 &lt;code&gt;Pascal&lt;/code&gt; 或 &lt;code&gt;Perl&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;事实的背后就是：这些语言都有着同样的目的——把人类的思想转变成为计算机能够读懂的 1 和 0——用夸张的（highfalutin）的计算机术语来讲：它们都是 &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_completeness&quot;&gt;图灵完备（Turing complete）&lt;/a&gt; 的。&lt;/p&gt;

&lt;p&gt;从底层上来看，这些语言都&lt;strong&gt;是&lt;/strong&gt;完全一样的。但从表面（人类和它们交互的接口）上来看，它们却有很大的不同。这，便是人们关注的焦点了。&lt;/p&gt;

&lt;h2&gt;不同的任务需要不同的工具&lt;/h2&gt;

&lt;p&gt;事实上，编程语言只是工具，而对于不同的任务，我们需要选择不同的工具。拖拉机（tractor trailer）、自行车、特斯拉汽车（Tesla）都是交通工具——它们都有轮子，有转向器（steering ?），并且都会将你从一个地方带到另一个地方——但显然，我们要将它们运用到不同的场景中。&lt;/p&gt;

&lt;p&gt;编程语言也是类似的：若是要构建网站，&lt;code&gt;Ruby&lt;/code&gt; 和 &lt;code&gt;Javascript&lt;/code&gt; 是不错的选择；&lt;code&gt;Java&lt;/code&gt; 和 &lt;code&gt;C++&lt;/code&gt; 则常常被运用在金融领域；至于 &lt;code&gt;Python&lt;/code&gt; 和 &lt;code&gt;R&lt;/code&gt;，它们是统计分析的工具。&lt;/p&gt;

&lt;p&gt;在语言的选择上，我们常常要从便捷程度、安全性和速度这几个方面进行权衡（trade-offs）——就像交通工具一样。通常来讲，需要根据手头上的工作视情况而定。&lt;/p&gt;

&lt;h2&gt;开发者们有不同的“口味”（tastes）&lt;/h2&gt;

&lt;p&gt;抛开纯粹的功能，开发者还会根据个人的“口味”来选择工具。&lt;/p&gt;

&lt;p&gt;编程语言是人类向计算机&lt;strong&gt;表达&lt;/strong&gt;想法的工具。尽管不同的开发者在许多方面都有相似之处，我们的思考方式仍存在着区别——这是自然所决定的。&lt;/p&gt;

&lt;p&gt;由于有多种编程语言供我们选择，我们完全可以选择一种“以我们想要的方式工作”的语言。有的开发者喜欢&lt;code&gt;Ruby&lt;/code&gt;的灵活性（flexibility），而另一些则喜欢&lt;code&gt;Java&lt;/code&gt;的严谨（strictness）。同时，有些语言看上去和数学一样深奥，而另一些读起来却和散文一样（prose）。&lt;/p&gt;

&lt;h2&gt;以人为本&lt;/h2&gt;

&lt;p&gt;业务是以人为本的。&lt;/p&gt;

&lt;p&gt;撇开功能和个人“口味”，通常来说，你会选择一种你了解的，或是你周围的人了解的语言。&lt;/p&gt;

&lt;p&gt;Stack Overflow 选择了 &lt;code&gt;C#&lt;/code&gt;，很大程度上是因为团队的创始人了解它。其次（In turn），它也是为创始人的朋友和同事所了解的。&lt;code&gt;C#&lt;/code&gt; 使招聘工作（recruiting）变得更加简单，同时也使 Stack Overflow 更快地进入市场。&lt;/p&gt;

&lt;p&gt;（幸运的是，&lt;code&gt;C#&lt;/code&gt; 同时也有着超棒的技术亮点）&lt;/p&gt;

&lt;p&gt;一种技术需要一个“生态圈”（ecosystem）来支持——那便是能为每个有需要的开发者提供工具和帮助的社区（communities）和组织（organizations）。好的“生态圈”能让个人开发者更加成功——&lt;code&gt;Ruby&lt;/code&gt; 就是个很好的例子。&lt;/p&gt;

&lt;h2&gt;多样性就是力量&lt;/h2&gt;

&lt;p&gt;总的来说，由于我们有着各种各样的任务，同时也有着各种各样的人在完成这些任务，我们才有了各种各样的编程语言。&lt;/p&gt;

&lt;p&gt;而正是这种多样性的存在，使得许多有趣的程序，有趣的公司甚至是有趣的职业生涯，从不可能成为了可能。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wisecity 商赛总结——也谈前端自动化测试</title>
   <link href="http://hsfzxjy.github.io//wisecity-conclusion/"/>
   <updated>2015-07-24T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//wisecity-conclusion</id>
   <content type="html">&lt;p&gt;真没想到，高伯还是给了我两百块报酬（土豪就是土豪）——我还担心他连运营成本都不肯给呢，毕竟网站做得并不是令人太满意。为社团做了两年的网站，这是第一次收到报酬，也算是自己赚的第一桶金吧。&lt;/p&gt;

&lt;p&gt;事实证明，临去北京前我给 cc 开放了管理者权限是一个非常正确的选择。尽管 wisecity 已经举办了两届，尽管在此之前我已做过 4 个网站，尽管这次的网站是在上一届的基础上进行改造的，我的心里仍有些忐忑不安，害怕它会出什么问题——抑或是大会的工作人员操作不当导致网站崩溃云云（这事真的发生了）。5 天的 wisecity 大会，我都身在北京，身边没有电脑，没有解决问题的条件，因此需要一个有基本的编程能力的人协助我。5 天下来，问题还不少，调试的过程可谓是十分原始：接到问题后，囿于有限的条件，我只能通过翻看手机上的代码，在脑海中模拟并觉出问题所在，找到最小代价的改动方案，再将改动之处通过短信通知 cc——当然，很多时候并不那么顺利，我还需要跟多的信息帮助判断，比如错误日志，又比如进行特定操作时的表现（这个最坑爹，可遇而不可求）。我尽一切努力在脑海中想象着程序的流程，很累，但也很有挑战性。&lt;/p&gt;

&lt;p&gt;第一天就遇到了一个棘手的问题：高伯在删除测试数据时不小心把管理员账号（admin）一起删掉了。这个消息从扬声器传出后，我足足沉默了一分钟，
心里像是有千万头草泥马奔过：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;怎么这么毛手毛脚？这下可好了，麻烦大了——虽然这个设计是有些不合理，但这不能怪我，django 已经封装好了（姜戈：怪我咯？）。快想办法快想办法……直接去后台加一个？不行不行，密码这块很难弄，MD5 + SHA1 + Salt，根本不是人能算的——只能让 django 自己产生一个用户了。嗯，我需要一个 MySQL，一个完整的 Python 开发环境，各种包……不知 cc 能不能应付过来。真是的一大早!@#$%^……
&lt;img src=&quot;http://i6.hexunimg.cn/2012-05-09/141219425.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;挂断电话，抄起手机噼里啪啦给 cc 发了一条短信，手把手教配置 MySQL，django，导出 SQL，上传数据库……吧啦吧啦洋洋洒洒几百字。发送时一直祈祷：但愿 cc 悟性高一些，不然真的完了——还好，半个小时后，前线传来了好消息：一切顺利。&lt;/p&gt;

&lt;p&gt;总算是松了一口气，才发现，背已汗湿。&lt;/p&gt;

&lt;p&gt;然而，事情还没有结束。&lt;/p&gt;

&lt;p&gt;第二天一早，我又被告知：上传的文件下载不了（纳尼？走之前不是才作过测试吗）。点开文件看网址，发现原来是七牛的域名后面少了一个&lt;code&gt;/&lt;/code&gt;，很快便处理好了。本以为可以好好玩一天了（那天出去玩），逛了大半个北京，夕阳西下时，却又接到一个 bug：选手列表只显示了 10 个用户，但应该有 40+ 个。&lt;/p&gt;

&lt;p&gt;这个 bug，前后调了 2 个小时。从奥林匹克公园，到中关村——因为，我并不知道问题出在哪，一点也不知道。打 &lt;code&gt;console.log&lt;/code&gt;，翻看网络记录（没错！在短信这种高时滞的通讯条件下！），最终发现，原来是 REST 返回的用户列表顺序反了，加载了最后 10 个，但由于用户没有明显的顺序标志，所以调试时没有察觉。改正之后，终于可以安心吃完饭——&lt;/p&gt;

&lt;p&gt;谁知，两分钟后，短信又开始轰炸了：加载的用户列表有重复项！很多的重复项！！没有规律的重复项！！！&lt;/p&gt;

&lt;p&gt;这个 bug，前后又调了 2 个小时。从中关村，再到人大附中，直到繁星爬满了苍穹。第一个反应是自制的瀑布流控件滚动事件并发处理没有做好。翻看源代码，似乎找到一处疑似有问题的地方，尝试让 cc 改了一下——半个小时后，传回了一个令人泄气的消息（中间配置&lt;code&gt;grunt&lt;/code&gt;又耗费了好些功夫）。冥想了一个小时，前后端的代码都看遍了，就是没有发现问题，最终只得放弃，告诉高伯用一些奇技*巧避开重复项。直至回来后，静下心分析代码，才发现在一个不起眼的地方有一处笔误，这是重构 HFMUN 的瀑布流控件时产生的。&lt;/p&gt;

&lt;p&gt;之后的几天，又有几个大大小小的 bug，抑或是需求改动，处理得还算顺利。可怕的是最后一天，KVDB 直接宕掉了——我整个缓存都是挂在 KVDB 上的，也怪当时没有作容灾处理，这个事件直接导致全站报 500 错误。急急忙忙关掉了缓存（还好做缓存时解了耦，只需改动两处即可），然后再质问 SAE，这些都是后话了。&lt;/p&gt;

&lt;p&gt;然而，这里有个值得反思的问题：既然我已经作过 4 个网站，为何还是会有 bug 出现？从 HFMUN 1.0，到 wisecity 1.0，到 HFMUN 2.0，随着我技术的逐渐成熟，bug 出现的频率也在不断下降——但是 bug 仍在，就像“杀不死的小强”一样。&lt;/p&gt;

&lt;p&gt;测试，关键还是在测试。&lt;/p&gt;

&lt;p&gt;人的主观意识，受制于时空、环境等诸多因素，任何一个参数的改变都有可能影响主观能动性的发挥。因此，不能保证在任何时候人的意识都能正确地、高效地发挥作用。软件工程，作为人类纯意识的产物，其正确性并不能百分百地保证。或是精神不振引起的一处笔误，或是重构迁移时没有同步更改的一处配置，抑或是一处自己在开发过程中完全没有意识到的错误——设计归设计，程序是否能运行，还是电脑说了算。许多的 bug 就是这样产生的。&lt;/p&gt;

&lt;p&gt;这个时候，单元测试（Unit Test）就显得非常重要了。通过分析需求而设计的测试样例，可以保证功能的相对正确性，即在能够考虑到的所有情况下，程序都能狗正常运行。这是重构（Refactory）过程中十分重要的一个环节，因为外部不变性是重构必须遵守的一个准则。&lt;/p&gt;

&lt;p&gt;在软件工程的上古时代，测试常常是由人工来完成的。团队中，总有几名成员每天都在做着重复、机械的工作，即对新增的功能或是修改过的功能进行测试。这种测试机制费时费力，同时也不是非常有效——上面已经说过了，没有人能保证主观意识的正确性。后来，出现了基于脚本的批量测试，测试人员可以编写一小段代码对特定的功能进行校验，很大程度地提高了效率；再到今天的分布式测试，成熟的测试系统可以模拟多种不同的生产环境，检测到代码库的变化后，便会自动进行单元测试。这是单元测试的自动化进程。&lt;/p&gt;

&lt;p&gt;今天的自动化测试固然很成熟，基本可以检测到各种逻辑错误。但在测试领域，却仍有一处令其束手无策的“禁地”——这便是 GUI 测试。综合分析 wisecity2.0 的 bugs，其中大部分都是前端出了问题。GUI 测试的麻烦在于：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GUI 是一个输入与输出交替进行的系统，并且输入具有无限的可能，无法用有限的测试样例对输入进行覆盖。比如第二天发生的那个 bug 需要在“文件上传成功后，跳转到首页，点击下载链接”、“用户数量超过 10 个，在列表页面快速滚动鼠标滚轮”才能被触发。许多的 bug 只有在真实生产环境中被用户捕捉到。&lt;/li&gt;
&lt;li&gt;GUI 的正确性没有一个绝对的判定标准。元素错位、颜色不正确，这些事件都不报错，但它们也是 bug，通常也只有人类认为它们是 bug。但它们的发生并不影响功能，只是用户体验（User Experience）不好——用户体验是一个纯主观的概念，至少在当下，计算机是不能理解的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前，GUI 测试主要还是依赖人工。Facebook 就有一个庞大的测试人员系统，以模拟尽可能多的用户操作样例。诚然，业界已经开始出现一些 前端自动化测试框架，有如 selenium、phantomjs 等通过 mock 事件模拟用户操作，更有甚者如 PhantomCSS 可以对特定操作的结果进行像素比对，可软件的主观部分还是需要人脑来判断。&lt;/p&gt;

&lt;p&gt;这是一个好时代，周围的一切都在飞快地变化着。希望在不久的将来，当人工智能出现时，这个问题能够有效地解决。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>记一次 DoS 诈骗网站的经历</title>
   <link href="http://hsfzxjy.github.io//how-to-fuck-a-bilk-site/"/>
   <updated>2015-07-24T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//how-to-fuck-a-bilk-site</id>
   <content type="html">&lt;p&gt;题海中激战，正当不亦乐乎时，手机响了。低头一看，是 95599 的短信：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;尊敬的农行用户，您的账户积分累计现可兑换价值 1024 元现金大礼包！请手机登陆 &lt;a href=&quot;http://wap.abchyd.com&quot;&gt;wap.abchyd.com&lt;/a&gt; 进行领取！【农业银行】&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1024 元？哼！这个数还挺整，但一看就是诈骗短信：哪有银行的域名长得和天书一样？更何况，我又没有农行的账户。&lt;/p&gt;

&lt;p&gt;正待删除时，一个念头划过脑海，指尖悬停在屏幕上方。&lt;/p&gt;

&lt;p&gt;突然想起昨天在 Freebuf 上看到的一篇文章，说是一个黑帽把臭名昭著的“10086 诈骗”给调戏了一番，在其数据库里填满了垃圾。Freebuf 上许多黑技术我从来都是可望而不可即，唯独这个比较简单——不就是写个脚本嘛，几分钟的事。既然他骗人骗到我这里来了，何不好好调戏一下呢？&lt;/p&gt;

&lt;p&gt;果断打开电脑，打开 Chrome，输入网址，映入眼帘的是一个表单（网站已被黑掉因此就没有图了，好吧我错了），要求用户填写 银行卡、密码、手机号还有一个逼格很高的验证码。&lt;/p&gt;

&lt;p&gt;F12 分析，发现对各个字段的校验仅仅局限于长度的检查，连格式检查都没有。至于验证码，随便填写四个数字就可以通过了（真是弱爆了，好吗！）。表单提交后跳转到一个有菊花加载圈的页面——说是“稍等，切勿关闭页面”，但其实这个页面并不会跳转，也不会有其他的操作，只有那个菊花一直在转。扫一眼地址栏，发现是&lt;code&gt;asp&lt;/code&gt;结尾——这又给了我不小的鼓励（这里并没有黑微软的意思， ASP 是十年前的产物，放在现在可以说是弱的不行了）。&lt;/p&gt;

&lt;p&gt;该怎么调戏呢？一个想法飞快地在脑海中产生——对了，就用高并发的垃圾数据拖爆它的数据库吧。这类钓鱼网站通常都是 IIS 6.0 + ASP + SQL SERVER，并且还是单机服务器，并发度一高机器很容易就垮了。&lt;/p&gt;

&lt;p&gt;简单地谢了一个脚本：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#! /usr/bin/python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gevent.monkey&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gevent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gevent&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;fucking&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://www.abchyd.com/add_1.asp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlencode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;#39;logonCardNum&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;#39;netType&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;111111&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;#39;tel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;12345678900&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;#39;randomId&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;1234&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;fucking&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gevent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gevent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用 &lt;code&gt;gevent&lt;/code&gt; 将 Socket 由阻塞型改装为协程型，以提高请求的并发度。&lt;/p&gt;

&lt;p&gt;接着，关掉所有的图形界面，只开一个终端（为了节省内存），运行 &lt;code&gt;./fuckit.py&lt;/code&gt;。哈哈哈，受死吧！&lt;/p&gt;

&lt;p&gt;用平板再次打开该网址（电脑已经跑不起浏览器了），可以发现网站已经明显慢了下来，时不时还会有 500 错误。&lt;/p&gt;

&lt;p&gt;两个小时后。&lt;/p&gt;

&lt;p&gt;当我再次访问网站时，它已经完全当机了。用&lt;code&gt;nmap&lt;/code&gt;扫了一遍，也没有端口活着了。一台邪恶的服务器就这样被干掉了。&lt;/p&gt;

&lt;p&gt;但我知道，这样的服务器，在世界上还存在着许多许多。曾经有段时间，不断遇到域名为 www.10086xxx.com 的诈骗网站。常常是一个域名被封了，另一个域名便冒出来，可见诈骗者拥有海量的资源。&lt;/p&gt;

&lt;p&gt;这次的攻击只是一次游戏，一次尝试，得以成功只是因为对方太弱了。&lt;/p&gt;

&lt;p&gt;真正的网络攻防战，远不止如此。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>不能说的秘密</title>
   <link href="http://hsfzxjy.github.io//secret/"/>
   <updated>2015-06-12T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//secret</id>
   <content type="html">&lt;p&gt;又遇到了一道难题。他轻轻放下笔，缓缓抬起了头。无意中，目光触及了她的背影。夕阳透过窗子，给那一隅洒下一片金黄，增添了几分童话般的意境。&lt;/p&gt;

&lt;p&gt;他的心动了一下，但很快又抑制住了那种奇妙的感觉。随即，他笑了笑，便埋下头去，继续解决那道艰深的难题。&lt;/p&gt;

&lt;p&gt;他知道，这一切，只是为了那个诺言。&lt;/p&gt;

&lt;p&gt;他清楚地记得，在早些时候，他和她许下了一个诺言：这三年，我们就把对方当成空气吧，谁也不认识谁。&lt;/p&gt;

&lt;p&gt;很奇怪的约定，不是吗？既然是同班同学，抬头不见低头见，又何出此言。&lt;/p&gt;

&lt;p&gt;想到这，他竟有些羞愧起来。&lt;/p&gt;

&lt;p&gt;而事实上，在更早些的时候，他们的关系并不是这样的——甚至，还是较要好的朋友。在那个遥远的年代，当女孩还未成为少女，他们还曾一起外出学习，一起嬉闹。他俩的相识源于各自父母的同学关系——他很高兴，她也很高兴，自己有这么一个朋友。&lt;/p&gt;

&lt;p&gt;是的，只是朋友，不是别的什么——一个令人向往的时候。&lt;/p&gt;

&lt;p&gt;上了初中，尽管进了不同的班级，他还是偶尔会去找她。一切依旧。&lt;/p&gt;

&lt;p&gt;但不知为何，一些奇怪的话却在班上渐渐漫开，如同疯长的野草。每一次去找她，他都感觉背后有人在窃窃私语，甚至还有几双异样的目光。诚然，在这个情窦初开的年纪，这样的一种关系是很敏感的。&lt;/p&gt;

&lt;p&gt;起初，他很反感这些言论。每一次，他都会极力辩解，甚至和对方吵得面红耳赤。可换来的，却是各种鬼脸，以及更加刻薄的话，就像火上浇油一般。&lt;/p&gt;

&lt;p&gt;渐渐地，他学会了沉默。为了避开那些讨厌的话，也不再那么频繁地去找她了。&lt;/p&gt;

&lt;p&gt;但，不知为什么，这之后每次想起她，心里却多了一些异样的感觉——这在以前是没有的，一种莫名的、不由自主的激动，一种朦胧的依恋——&lt;/p&gt;

&lt;p&gt;就像那流言蜚语所说的，他喜欢上她了。&lt;/p&gt;

&lt;p&gt;人，真是奇怪的动物。&lt;/p&gt;

&lt;p&gt;他不再对那些传言感到愤怒，甚至，还附和起来，公开表露自己的心声——这时，他清楚：这已不再是传言，而是自己真实的想法。&lt;/p&gt;

&lt;p&gt;然而，她却在悄悄地发生变化——不知为何，他每次去找她，她却借故不出来。在路上相遇，也不打招呼，没有微笑，宛如陌生人一般。&lt;/p&gt;

&lt;p&gt;他很奇怪，却也没多想，大概是有了新朋友罢——人都会长大的。&lt;/p&gt;

&lt;p&gt;直到，那个落雨的夏夜。&lt;/p&gt;

&lt;p&gt;那天，正是中考放榜的日子，他得知她和自己考入了同一所重点高中，并进入了同一个重点班，很是兴奋。刚想通过QQ为她庆贺，不料却发觉：自己已被她拉黑了。&lt;/p&gt;

&lt;p&gt;想起初中三年的种种变化，他再也忍不住了，立即发短信询问她。得到的，却是她冰冷的回复：&lt;/p&gt;

&lt;p&gt;“之前我一直把你当朋友，可你却把我们想成某种关系，还到处宣扬。这让我很受伤。我想，我们还是不要做朋友了……”&lt;/p&gt;

&lt;p&gt;“接下来的三年，我真的不知道该如何度过，和你同在一个班，我真的很痛苦。就把我当成空气吧，这样对你我都好……”&lt;/p&gt;

&lt;p&gt;他沉默了，回想自己的种种，的确，有些太过分了。但他却不知，这些事，会如此伤她的心。&lt;/p&gt;

&lt;p&gt;也好，就让我们彼此当陌生人吧。&lt;/p&gt;

&lt;p&gt;夕阳转了个角度，那一片金黄在一点点扩大，但同时也变得更加温柔。&lt;/p&gt;

&lt;p&gt;两年了，他们没有说过一句话。&lt;/p&gt;

&lt;p&gt;尽管流言蜚语早已不在，他也不愿再与她接触——一切，都是因为那个诺言。&lt;/p&gt;

&lt;p&gt;如果不能做朋友，那不伤害对方，也是一种善良。&lt;/p&gt;

&lt;p&gt;“之前你们关系不是很好的吗？怎么现在像不认识了一样？”两年来，常有好奇的人问他。&lt;/p&gt;

&lt;p&gt;每一次，他都会神秘地笑一笑：&lt;/p&gt;

&lt;p&gt;“这是一个不能说的秘密。”&lt;/p&gt;

&lt;p&gt;（致：那个被伤害过的她）&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>那一年，我们望向星空</title>
   <link href="http://hsfzxjy.github.io//that-starry-night/"/>
   <updated>2015-05-08T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//that-starry-night</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;还记得吗     &lt;/p&gt;

&lt;p&gt;那年夏天     &lt;/p&gt;

&lt;p&gt;最灿烂、最寂寞的星空&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实，比这部电影更出名的，是五月天的那首《星空》，一首我十分熟悉的歌。每当那旋律响起，我总有些淡淡的惆怅：夜空下，尽管繁星璀璨，却无法触及；生活中，尽管万分努力，无奈梦想却悄悄陨落——世上的一切，似乎总要与人作对。然而一曲过后，当那歇斯底里的旋律如晨雾渐渐散去，悔恨、无奈与痛苦，也随之沉淀下来，一切又恢复了平静——就像是伫立于人生的黄昏中，回忆着年少时那数不清的美梦。&lt;/p&gt;

&lt;p&gt;而，直到最近我才得知：这只是一首片尾曲，原来还有一部与它同名的电影。&lt;/p&gt;

&lt;p&gt;《星空》。&lt;/p&gt;

&lt;p&gt;没有浮华的特效，没有肉麻的对白。那一年，一个少年，一位少女，一段耐人寻味的经历。&lt;/p&gt;

&lt;p&gt;“我们一起去看星空吧。”&lt;/p&gt;

&lt;p&gt;那一晚，在城市的光与影中，在混凝土森林间，小美轻轻地问小杰，没有过多的犹豫。&lt;/p&gt;

&lt;p&gt;也许，小美的遭遇是值得同情的：尽管家境殷实，父母却常常争吵不休。每每置身于这偌大的房子里，却都如同处在异域时空，唯有那陈旧的回忆才能给她些许慰藉。相似的经历，让少女认识了小杰——那个在圣诞夜吹笛子的男孩，那个和她一起做教室布置的男孩。&lt;/p&gt;

&lt;p&gt;腾空而起的火车，云雾缭绕的阿里山，雨夜的旧教堂，爷爷的小木屋……一场梦幻般的冒险正在进行着。当然，还有那一夜的星空，灿烂得令人终生难忘。&lt;/p&gt;

&lt;p&gt;可惜，小美却病倒了，旅途也不得不要结束了。&lt;/p&gt;

&lt;p&gt;但生活还得继续。从山里回来，小杰便匆匆地走了，甚至，还没来得及说再见；小美的父母还是离婚了，尽管，小美并不希望。曾经的美好，如松动的拼图般叮当散落下来，露出背后灰色的现实——就像那梦中的场景，残酷，毫不留情。&lt;/p&gt;

&lt;p&gt;只是，那片星空，给了她些许慰藉。&lt;/p&gt;

&lt;p&gt;随着时光流逝，曾经的不解与难舍，终究还是要散去——而留下的，仅有回忆。这，也是歌曲《星空》所要表达的。&lt;/p&gt;

&lt;p&gt;曾几何时，我们每个人心中，都有一片属于自己的星空——在年少时，在我们的上古时代，当我们依旧单纯。&lt;/p&gt;

&lt;p&gt;总有一段幻想，让我们流连忘返，就像驰骋于梵高画卷中的铁皮列车；总有一段冒险，让我们刻骨铭心，正如山林间那次凶险的跋涉；而总有一个人，值得我们用一生去回忆。&lt;/p&gt;

&lt;p&gt;当残酷的现实还未闯入梦境，当尘世的烦扰还没纠缠于心，那时，那个无法无天的自己，才是真正快乐的。&lt;/p&gt;

&lt;p&gt;人，是脆弱的。也许，生活的磨难能使我们变得懦弱，岁月的流逝会让我们失去梦想，世间的一切都和自己过不去。&lt;/p&gt;

&lt;p&gt;但，人也可以很坚强。需要的并不多，只是那一片铭记在心的星空。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>【HFMUN重构系列】4. Restful API 框架</title>
   <link href="http://hsfzxjy.github.io//hfmun-reconstruction-4/"/>
   <updated>2015-04-23T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//hfmun-reconstruction-4</id>
   <content type="html">&lt;h2&gt;&lt;strong&gt;0x01 什么是REST&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;“REST”这个词，也许会在许多场合上出现，但并不是每个人都理解它的意思。在维基百科中，它被定义为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Representational State Transfer (REST)&lt;/strong&gt; is a software architecture style consisting of guidelines and best practices for creating scalable web services. REST is a coordinated set of constraints applied to the design of components in a distributed hypermedia system that can lead to a more performant and maintainable architecture.    &lt;cite&gt;—— From &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;Wikipedia&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说：&lt;strong&gt;REST，它不是一种技术，也不是一种标准，而是一种网络资源访问模式，一种编程哲学&lt;/strong&gt;。狭义上来说，REST指的是这样的设计思想：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每一个 URI 代表一种资源&lt;/li&gt;
&lt;li&gt;客户端和服务器之间，传递这种资源的某种表现层&lt;/li&gt;
&lt;li&gt;客户端通过五个 HTTP 动词（GET，POST，PUT，PATCH，DELETE），对服务器端资源进行操作，实现&amp;quot;表现层状态转化&amp;quot;（State Transfer）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;狭义的 REST 范式是基于 B/S 架构，并使用 HTTP 协议进行数据交互。比起古老而笨重的 SOAP 等架构，这种模式更加轻便、直观，使网络资源的访问变得简洁、优雅，也更加符合当今 Web 开发的需求。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;0x02 如何正确使用 REST&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;正如上面所说，REST 是基于 HTTP 协议的。它用 URI 来定义资源，并用 HTTP 请求来操作资源。然而，并不是说使用了 HTTP 协议即可称之为 REST——真正意义上的 REST，有自己的一套准则。也正是这套准则，才使得 REST 简洁、优雅。&lt;/p&gt;

&lt;h3&gt;REST 是语义的&lt;/h3&gt;

&lt;p&gt;语义的（Semantic）是指：&lt;strong&gt;资源的 URI 或是资源的访问必须是有意义的，符合或尽量符合自然语言的规范&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;举个例子：如果我要访问订单的列表，那么一个良好的 URI 定义应该是这样的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/orders/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;资源的 URI 通常由名词组成，这也正符合自然语言的规范——表达一个物体，人们使用名词。&lt;/p&gt;

&lt;p&gt;如果要精确定位某一个资源，通常需要进一步限制资源：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/orders/1/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或是：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/orders/current/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;甚至，可以表示资源的从属关系：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/users/current/orders/1/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就像在和服务器对话一样：&lt;strong&gt;“请给我当前用户的第一份订单”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;而一些与资源本身无关的信息，比如列表的最大数目，可以放到 URI Params 中：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-HTTP&quot; data-lang=&quot;HTTP&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/orders/?limit=20&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTTP协议中的动词（Verbs），通常用来描述对资源的操作。每一种动词都有它自己的意义：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;——获取资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;——建立一个新的资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt;——修改一个资源，必须提交该资源的所有内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt;——修改一个资源，可以只提交该资源的一部分内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt;——删除一个资源&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;REST 是多样的&lt;/h3&gt;

&lt;p&gt;至于返回的数据，服务器端可以提供多种格式供客户端选择，如 JSON、XML、YAML等等，通常用格式的缩写作为尾缀：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/orders.json/&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;REST 是健壮的&lt;/h3&gt;

&lt;p&gt;倘若用户请求的资源不存在或是提交的数据不合规范，服务器必须以&lt;strong&gt;HTTP状态码&lt;/strong&gt;的方式通知客户端。常用的状态码有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;400&lt;/strong&gt; 请求参数有误&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;401&lt;/strong&gt; 用户未登录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;403&lt;/strong&gt; 没有权限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404&lt;/strong&gt; 资源找不到&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;strong&gt;0x03 django 中的 REST&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;像 REST 这么高大上的东西，早就有人对它进行了实现，这便是：&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django Rest Framework&lt;/a&gt;。基本的用法可以参见官网。&lt;/p&gt;

&lt;p&gt;成熟的框架并不是最好的，只有适合自己的才是。在使用过程中我遇到了一系列的问题，并以自己的方式解决了他们。&lt;/p&gt;

&lt;h3&gt;ViewSet 的路由不够 D.R.Y.&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ViewSet&lt;/code&gt; 是 &lt;code&gt;rest_framework&lt;/code&gt;中一个十分有创意的地方。它将 CRUD 操作集中到了一个类中，提高了代码的复用性。然而，每一个 &lt;code&gt;ViewSet&lt;/code&gt; 都需要 定义一个 &lt;code&gt;Router&lt;/code&gt; 进行 URL 路由，这很麻烦。于是乎我便想：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;要是能让它自动感知&lt;code&gt;ViewSet&lt;/code&gt;的存在并自动为其定义路由，就像&lt;code&gt;django&lt;/code&gt;中的&lt;code&gt;Models&lt;/code&gt;一样，那该多好啊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是，我仿照&lt;code&gt;django.apps.registry&lt;/code&gt;，写了一个能在启东时探知一个 app 中固定内容的 &lt;code&gt;app_cache&lt;/code&gt; 模块：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# app_cache/core.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.utils.importlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import_module&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.utils.module_loading&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_has_submodule&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.apps&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Inherit this class and override the fields below, then import and instantiate&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    the subclass at AppConfig.ready method.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;module_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;default_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__module_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_config&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_app_configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_has_submodule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__module_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时新建一个叫&lt;code&gt;api&lt;/code&gt;的 app，在&lt;code&gt;api/core.py&lt;/code&gt;中实现自动寻找&lt;code&gt;ViewSet&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app_cache&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppCache&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;APICache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;default_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;routers&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;module_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;routers&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_routers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APICache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在&lt;code&gt;api/urls.py&lt;/code&gt;中实现自动路由：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# api/urls.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework.routers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultRouter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework.viewsets&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewSetMixin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.core&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;extra_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_routers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;basestring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extra_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;issubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewSetMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;issubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extra_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;extra_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^auth/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;rest_framework.urls&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;rest_framework&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^root/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;api.views.root&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_list&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后，只需在每个 app 中定义一个&lt;code&gt;routers.py&lt;/code&gt;，并定义&lt;code&gt;routers&lt;/code&gt;变量即可实现 &lt;code&gt;ViewSet&lt;/code&gt; 的自动路由，例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAPIViewSet&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;routers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAPIViewSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非常方便。&lt;/p&gt;

&lt;h3&gt;分页机制的进一步改进&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rest_framework&lt;/code&gt;提供了一个数据分页的机制：透过&lt;code&gt;limit&lt;/code&gt;和&lt;code&gt;page&lt;/code&gt;这两个 URL 参数可以实现数据的分页以及页码索引。&lt;/p&gt;

&lt;p&gt;但这个功能在客户要求的应用场景中似乎并不太实用。毕竟，模联大会是一次节奏紧张的活动，网站并发量大，内容更新频繁，若应用传统分页的构想，可能会出现翻页时浏览到重复内容的情况。除此之外，这样的架构不利于实现&lt;strong&gt;瀑布流式&lt;/strong&gt;的界面，因为瀑布流式要求待加载的数据与已加载的数据完美地无缝接合，而这一点对于传统分页架构来说也是力不从心。&lt;/p&gt;

&lt;p&gt;曾记得，&lt;a href=&quot;http://open.weibo.com/wiki/2/statuses/public_timeline&quot;&gt;新浪微博 API &lt;/a&gt;中好像有类似的实现：凡是返回一个列表的 API ，返回数据中都会有&lt;code&gt;previous_cursor&lt;/code&gt;和&lt;code&gt;next_cursor&lt;/code&gt;两个参数，通过这两个参数，开发者可以获取上一份或下一份的数据。受此启发，我决定增强一下&lt;code&gt;rest_framework&lt;/code&gt;的分页机制。&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;想法&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;可在 API 的请求中传入参数 &lt;code&gt;sinceid&lt;/code&gt; 或是 &lt;code&gt;beforeid&lt;/code&gt;，表示获取&lt;code&gt;id&lt;/code&gt;紧跟着&lt;code&gt;&amp;lt;sinceid&amp;gt;&lt;/code&gt;或是&lt;code&gt;&amp;lt;beforeid&amp;gt;&lt;/code&gt;的一批数据。&lt;/li&gt;
&lt;li&gt;当 API 返回值是一个列表时，返回数据中增加两个域&lt;code&gt;since&lt;/code&gt;和&lt;code&gt;before&lt;/code&gt;，分别是指向上一批数据及下一批数据的 URL。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;改动得不多，于是我便直接在别人的代码里开刀了。&lt;/p&gt;

&lt;p&gt;首先在&lt;code&gt;rest_framework/&lt;/code&gt;中增加一个&lt;code&gt;custom_filters.py&lt;/code&gt;，用于存放自定义的过滤器：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django_filters&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberFilter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;__all__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;get_timeline_filter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;is_timeline_filter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimelineFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_timeline_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;issubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimelineFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_timeline_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_filter_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    工厂方法，给不同的模型类指派不同的过滤器&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_filter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;base_filter_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterSet&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_TimelineFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_filter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimelineFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;sinceid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;pk&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;gt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;beforeid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;pk&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;lt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_filter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Meta&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_class&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_TimelineFilter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改&lt;code&gt;rest_framework/generics.py&lt;/code&gt;，为&lt;code&gt;GenericAPIView&lt;/code&gt;加入&lt;code&gt;hack_filter_class()&lt;/code&gt;方法，放入上面定义的过滤器；再修改&lt;code&gt;get_filter_backends()&lt;/code&gt;方法，使其生效：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.custom_filters&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericAPIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hack_filter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filter_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;filter_class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_timeline_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_timeline_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_filter_backends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Returns the list of filter backends that this view requires.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hack_filter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;filter_backends&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_backends&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter_backends&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;#39;The `filter_backend` attribute and `FILTER_BACKEND` setting &amp;#39;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;#39;are due to be deprecated in favor of a `filter_backends` &amp;#39;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;#39;attribute and `DEFAULT_FILTER_BACKENDS` setting, that take &amp;#39;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;#39;a *list* of filter backend classes.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;ne&quot;&gt;PendingDeprecationWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stacklevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;filter_backends&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter_backends&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后再修改&lt;code&gt;rest_framework/pagination.py&lt;/code&gt;，这个模块的功能是给&lt;code&gt;Serializer&lt;/code&gt;加入分页机制中一些必要的域，如&lt;code&gt;next&lt;/code&gt;和&lt;code&gt;previous&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sinceid_field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;sinceid&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;beforeid_field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;beforeid&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SinceIdField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_native&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sinceid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_absolute_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace_query_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sinceid_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinceid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;beforeid_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeforeIdField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_native&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;beforeid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_absolute_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace_query_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;beforeid_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beforeid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sinceid_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PaginationSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BasePaginationSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;paginator.count&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NextPageField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PreviousPageField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeforeIdField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;since&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SinceIdField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成了——在没有修改一处业务逻辑代码的前提下，我增强了分页机制。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;0x04 前端接口&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;终于来到前端部分了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>高中化学常用除杂方法</title>
   <link href="http://hsfzxjy.github.io//chemistry-impurity/"/>
   <updated>2015-04-22T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//chemistry-impurity</id>
   <content type="html">&lt;h2&gt;0x00 规律&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;要除去弱酸性气体中混有的强酸性气体杂质，我们常选用弱酸性气体溶于水后形成的饱和盐溶液。若弱酸性气体溶于水后为一元酸，则用该酸形成的饱和正盐溶液。若为二元弱酸，则为该酸形成的饱和酸式盐，如$Cl_2$混有$HCl$气体，用饱和食盐水净化吸收，如$CO_2$中混有$HCl$、$SO_2$用饱和$NaHCO_3$溶液净化吸收。 &lt;/li&gt;
&lt;li&gt;要除去非还原性气体中的还原性气体，应选用反应前后均具固体的具有氧化性的物质。如$CO_2$中混有的$CO$,用灼热的$CuO$除去。 &lt;/li&gt;
&lt;li&gt;要除去非氧化性气体中的氧化性气体，应选用反应前后均是固体的具有还原性的物质。如$CO_2$中混有的$O_2$，用灼热的铜网除去。 &lt;/li&gt;
&lt;li&gt;要除去中性气体中的酸性气体，用强碱溶液或碱石灰吸收。如：$CO$中的混有的$CO_2$用$NaOH$溶液吸收除去。 &lt;/li&gt;
&lt;li&gt;要除去中性气体中的碱性气体(一般是$NH_3$),用浓硫酸吸收。如：N2中混有的$NH_3$，用浓硫酸吸收除去。 &lt;/li&gt;
&lt;li&gt;要除去饱和烃中的烯烃、炔烃气体，用溴水吸收，如：$CH_4$中混有$C_2H_4$、$C_2H_2$，用溴水可吸收除去。 &lt;/li&gt;
&lt;li&gt;要除去有机烃中混有的无机酸性气体可用$NaOH$溶液和碱石灰吸收而除去。 &lt;/li&gt;
&lt;li&gt;还有些个别方法，就应该个别记住了。如NO中混有的少量$NO_2$气体，可用水吸收转化而除去，$C_2H_4$中混有的$H_2S$,除可用规律4的方法除去外，还可用$CuSO_4$或$Pb(NO_3)_2$等溶液除去。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;0x01 常见除杂&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;N2($O_2$) ——灼热的铜丝 2Cu+$O_2$=2 $CuO$&lt;br&gt;&lt;/li&gt;
&lt;li&gt;$CO_2$($H_2S$) ——用饱和$NaHCO_3$溶液 $NaHCO_3$+$H_2S$=NaHS+$H_2O$+$CO_2$↑&lt;br&gt;&lt;/li&gt;
&lt;li&gt;$CO_2$($CO$) ——灼热的氧化铜 $CuO$+$CO$=Cu+$CO_2$&lt;br&gt;&lt;/li&gt;
&lt;li&gt;$CO_2$($HCl$) ——用饱和$NaHCO_3$溶液 $NaHCO_3$+$HCl$=$NaCl$+$H_2O$+$CO_2$↑&lt;br&gt;&lt;/li&gt;
&lt;li&gt;$H_2S$($HCl$) —— 用饱和NaHS溶液 NaHS+$HCl$=$NaCl$+$H_2S$&lt;br&gt;&lt;/li&gt;
&lt;li&gt;$SO_2$($HCl$) ——用饱和NaHSO3溶液 NaHSO3+$HCl$=$NaCl$+$H_2O$+$SO_2$↑&lt;br&gt;&lt;/li&gt;
&lt;li&gt;$Cl_2$($HCl$) ——用饱和食盐水，$HCl$易溶而$Cl_2$不溶&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$MnO_2$(碳粉)——&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将混合物在氧气中点燃 C+$O_2$=$CO_2$ 或者&lt;/li&gt;
&lt;li&gt;通入灼热的氧化钙 C+$CaO$=Ca+$CO_2$↑(条件:高温) 或者&lt;/li&gt;
&lt;li&gt;通入灼热的氧化铁 3C+2 $Fe_2O_3$=3CO2↑+ 4Fe&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;碳粉($MnO_2$)——加浓盐酸$MnO_2$+4$HCl$(浓)=$MnCl_2$+$Cl_2$↑+2$H_2O$  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C($CuO$)——加稀盐酸$CuO$+2$HCl$=$CuCl_2$+$H_2O$  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$Al_2O_3$($Fe_2O_3$) ——这个一步是无法除去的啊！  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;方法一&lt;/strong&gt;： 

&lt;ol&gt;
&lt;li&gt;将固体混合物溶于过量的氢氧化钠溶液，过滤除去氧化铁，留下滤液。 $Al_2O_3$+2$OH^{-}$=2$AlO^{2-}$+$H_2O$ &lt;/li&gt;
&lt;li&gt;向滤液中通入过量的$CO_2$，过滤得到$Al(OH)_3$,加热使$Al(OH)_3$分解。 $AlO^{2-}$+2$H_2O$+$CO_2$=$Al(OH)_3$+$HCO_3^-$ 2$Al(OH)_3$=$Al_2O_3$+3$H_2O$&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;方法二&lt;/strong&gt;：     &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 将固体混合物溶于过量的盐酸溶液中，是混合物完全溶解。 $Al_2O_3$+6$H^+$=2$Al^{3+}$+3$H_2O$ $Fe_2O_3$+6$H^+$=2$Fe^{3+}$+3$H_2O$&lt;br&gt;&lt;/li&gt;
&lt;li&gt;加入过量$NaOH$溶液,过滤除去沉淀$Fe(OH)_3$, $Fe^{3+}$+3$OH^{-}$=$Fe(OH)_3$ $Al^{3+}$+4$OH^{-}$=$AlO^{2-}$+2$H_2O$&lt;br&gt;&lt;/li&gt;
&lt;li&gt;向滤液中通入过量的$CO_2$，过滤得到$Al(OH)_3$,加热使$Al(OH)_3$分解。$AlO^{2-}$+2$H_2O$+$CO_2$=$Al(OH)_3$+$HCO_3^-$ 2$Al(OH)_3$=$Al_2O_3$+3$H_2O$如果是反一下就直接加氢氧化钠啊！&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SIO2($Al_2O_3$) ——加入稀盐酸$Al_2O_3$ + 6$HCl$ = 2AlCl3 + 3$H_2O$  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$FeCl_3$($FeCl_2$) ——通入氯气$Cl_2$+2 $FeCl_2$=2 $FeCl_3$   &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$FeCl_2$($FeCl_3$) ——加入铁Cu+2 $FeCl_3$=$CuCl_2$+$FeCl_2$  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$NaCl$($NH_4Cl$) ——固体的话直接加热$NH_4Cl$=$NH_3$+$HCl$  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C2H6($C_2H_4$) ——通入溴水或者酸性高锰酸钾溶液$CH_2=CH_2$+$Br_2$→$CH_2Br-CH_2Br$  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;溴苯($Br_2$) ——加入氢氧化钠2 $NaOH$+$Br_2$=$NaBr$+$NaBrO$+$H_2O$分液  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;硝基苯($NO_2$) ——加入氢氧化钠2 $NO_2$ + 2 $NaOH$ = $NaNO_2$ + $NaNO_3$ +$H_2O$分液  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;甲苯(苯酚)——加入氢氧化钠$Ph-OH$+$NaOH$=$Ph-ONa$+$H_2O$分液  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;乙醛(乙酸)——加饱和碳酸钠2$CH_3COOH$ + $Na_2CO_3$ = 2$CH_3COONa$+ $H_2O$ + $CO_2$蒸馏&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;乙醇(水)——加氧化钙蒸馏  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;乙酸乙酯(乙酸)——饱和碳酸钠溶液2$CH_3COOH$ + $Na_2CO_3$ = 2$CH_3COONa$+ $H_2O$ + $CO_2$分液  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;肥皂(甘油)——加入$NaCl$，发生盐析进行过滤  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;葡萄糖(淀粉)——加入稀硫酸水解$C_6H_{10}O_5$(淀粉)+$H_2O$=$C_6H_{12}O_6$(葡萄糖)  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;溴乙烷(乙醇)——用水，分液 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>初试HTML5</title>
   <link href="http://hsfzxjy.github.io//html5-media-test/"/>
   <updated>2015-04-19T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//html5-media-test</id>
   <content type="html">&lt;h2&gt;audio &amp;amp; video&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;video&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3school.com.cn/i/movie.ogg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controls=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;controls&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
您的浏览器不支持 video 标签。
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;audio&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3school.com.cn/i/horse.ogg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controls=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;controls&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
Your browser does not support the audio element.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;center-example&quot;&gt;
    &lt;video src=&quot;http://www.w3school.com.cn/i/movie.ogg&quot; controls=&quot;controls&quot;&gt;
    您的浏览器不支持 video 标签。
    &lt;/video&gt;
    &lt;audio src=&quot;http://www.w3school.com.cn/i/horse.ogg&quot; controls=&quot;controls&quot;&gt;
    Your browser does not support the audio element.
    &lt;/audio&gt;
&lt;/div&gt;

&lt;h2&gt;canvas&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myCanvas&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    your browser does not support the canvas tag 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myCanvas&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#FF0000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createLinearGradient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;175&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;grd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addColorStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#FF0000&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;grd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addColorStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#00FF00&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;175&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;center-example&quot;&gt;
    &lt;canvas id=&quot;myCanvas&quot; class=&quot;align-center&quot;&gt;
        your browser does not support the canvas tag 
    &lt;/canvas&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    var canvas=document.getElementById('myCanvas');
    var ctx=canvas.getContext('2d');
    ctx.fillStyle='#FF0000';
    ctx.fillRect(0,0,80,100);
    var grd=ctx.createLinearGradient(0,0,175,50);
    grd.addColorStop(0,&quot;#FF0000&quot;);
    grd.addColorStop(1,&quot;#00FF00&quot;);
    ctx.fillStyle=grd;
    ctx.fillRect(0,100,175,50);
&lt;/script&gt;

&lt;h2&gt;LocalStorage&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#localstorage-input&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;my-key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;change, keyup&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;example&quot;&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label class=&quot;control-label&quot;&gt;这个文本框中的内容不会改变：&lt;/label&gt;
        &lt;input id=&quot;localstorage-input&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    var $input = $(&quot;#localstorage-input&quot;), key = 'my-key';
    $input.val(localStorage.getItem(key));
    $input.on('change, keyup', function () {
        localStorage.setItem(key, $input.val());
    })
&lt;/script&gt;
</content>
 </entry>
 
 <entry>
   <title>如何备份apt-get已安装的软件列表？</title>
   <link href="http://hsfzxjy.github.io//backup-apt-get/"/>
   <updated>2015-04-19T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//backup-apt-get</id>
   <content type="html">&lt;p&gt;&lt;code&gt;apt-get&lt;/code&gt;是 ubuntu 下管理软件包的一个工具，实用简单，功能强大。平时若要安装或卸载软件包，只需轻敲一条指令即可。每一台ubuntu上，都安装着数以千百计的软件包——或是内核模块，或是工作、娱乐所需的软件，在它们的支持下，工作着这个开放的操作系统。&lt;/p&gt;

&lt;p&gt;但，如果有一天，系统需要被重装——或是无可救药了，抑或是购置了新的设备，问题来了：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如何将现有电脑上的软件包迁移至新的系统呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很简单。&lt;/p&gt;

&lt;p&gt;首先，将原有的软件列表导出：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo dpkg --get-selections  &amp;gt; app-backup-list.lst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最好是设置一个定时任务，每隔一段时间就保存一次列表，并且要保存到一个独立的分区。以免某天系统真的坏了。&lt;/p&gt;

&lt;p&gt;接下来便是导入了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo dpkg --set-selections &amp;lt; app-backup-list.lst
sudo apt-get -y update
sudo apt-get dselect-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至于软件源的备份，只需将&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;文件复制过去即可。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>博客迁移至Github.io</title>
   <link href="http://hsfzxjy.github.io//migrate-to-github/"/>
   <updated>2015-04-17T00:00:00+08:00</updated>
   <id>http://hsfzxjy.github.io//migrate-to-github.io</id>
   <content type="html">&lt;h3&gt;为什么迁出？&lt;/h3&gt;

&lt;p&gt;话说&lt;strong&gt;SinaAppEngine&lt;/strong&gt;真是越来越不像话了：在没有征得我们开发者的同意的情况下擅自把应用总数限制调整为5个（整整少了一半！），还口口声声说是作过调查——&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“大约90%开发者只用5个应用就足够了。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同时，增加配额的钱还那么贵，实在担负不起的我只好精简应用数目，以防未来某天应用数不够用。&lt;/p&gt;

&lt;h3&gt;为什么选择Github Pages？&lt;/h3&gt;

&lt;p&gt;本人爱好程序，习惯以代码的方式来做事——写文章时也不例外。因此，我需要找到一个支持Markdown的博客平台进行迁移。为此，我经历了很长时间的思想斗争——&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;新浪、网易 等国内博客平台？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;果断否决。这些平台都是面向大众的，只提供富文本编辑器，效率捉急。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;博客园？“程序员的网上家园”，总会好一些吧？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽说最近博客园推出了Markdown编辑器，一切似乎很美好。但是——它——没有即时预览的功能！！这么重要的东西都不加上，写作时就像浑水中摸鱼一样，别提多不爽了。再说了，在博客园上聚集的多是些常工作于Windows平台下的程序员，在“信仰”方面有些合不来（别打我～～）。思考再三，还是否决了。&lt;/p&gt;

&lt;p&gt;而事实上，比起公共博客平台，我还是比较喜欢个人博客。一来逼格比较高，可以为将来的交友、面试等活动加分；二来可以随心所欲地自定义样式，使网站完全符合我的Style。&lt;/p&gt;

&lt;p&gt;这么一来，似乎就只剩下Github Pages了。&lt;/p&gt;

&lt;h3&gt;那么，如何在Github Pages上进行写作？&lt;/h3&gt;

&lt;p&gt;首先要介绍一下 Github Pages 的架构。先看看 &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/#using-jekyll&quot;&gt;Github的介绍&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;Using Jekyll&lt;/h4&gt;

&lt;p&gt;Every GitHub Page is run through Jekyll when you push content to a specially named branch within your repository. For User Pages, use the master branch in your username.github.io repository. For Project Pages, use the gh-pages branch in your project&amp;#39;s repository. Because a normal HTML site is also a valid Jekyll site, you don&amp;#39;t have to do anything special to keep your standard HTML files unchanged. Jekyll has thorough documentation that covers its features and usage. Simply start committing Jekyll formatted files and you&amp;#39;ll be using Jekyll in no time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以看得出来，Github Pages使用Jekyll作为后端引擎——这是一个用Ruby写的博客框架。但用户不需要写一行Ruby的代码，只需在名为&lt;strong&gt;&lt;username&gt;.github.io&lt;/strong&gt;的项目下面以一定的目录结构放置markdown文件，Jekyll便会自动生成整个站点。&lt;/p&gt;

&lt;p&gt;这里需要注意的是，Jekyll生成的站点是&lt;strong&gt;静态的&lt;/strong&gt;，也就是说站点的文件是Jekyll编译好之后存放在服务器端的，而不是接到请求之后才去编译站点，因此站点的访问速度是相当快的——这也是它的优点。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;我被这种机制深深地震惊了：这是一种我从来没见过的写作方式，无论是从方式上，抑或是从形式上。Jekyll 能让你真正专注于写作，而不是其他一些无谓的东西。     &lt;/p&gt;

&lt;p&gt;它把一切无关的东西都摒弃了，这才是真正的极简主义。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;最初的Jekyll站点是没有样式的。为了不重复发明轮子，我决定使用现成的主题。在网上略一搜索便有了收获：&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;Jekyll Bootstrap&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Bootstrap是我最常用，也是最欣赏的一个前端框架。因此尽管这个主题仍在开发当中，我还是毫不犹豫地选中了它。    &lt;/p&gt;

&lt;p&gt;从 &lt;a href=&quot;https://github.com/plusjade/jekyll-bootstrap.git&quot;&gt;Github&lt;/a&gt; 上将这个项目 clone 下来，覆盖到hsfzxjy.github.io项目下，理论上，站点就可以运行了。接下来，进行一些样式上的微调就可以了。   &lt;/p&gt;

&lt;p&gt;至于评论系统，由于 Github Pages 是静态站点，因此只能使用第三方评论服务。Jekyll 默认的评论服务是Disqus ——一个国外的评论服务站点，但考虑到我在国内，许多人无法使用Facebook，Twitter等社交平台登录评论，我将它替换为了&lt;strong&gt;多说&lt;/strong&gt;。具体操作，可以参考 &lt;a href=&quot;http://havee.me/internet/2013-07/add-duoshuo-commemt-system-into-jekyll.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Github Pages上的文章只能在本地编辑，因而需要一个趁手的 Markdown 编辑器。在 Ubuntu 环境下我使用的是 &lt;strong&gt;ReText&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install retext 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Ubuntu 网络每20秒断开重连一次的解决方案</title>
   <link href="http://hsfzxjy.github.io//solution-of-network-broken-down-per-20s-under-ubuntu/"/>
   <updated>2015-03-31T19:18:38+08:00</updated>
   <id>http://hsfzxjy.github.io//solution-of-network-broken-down-per-20s-under-ubuntu</id>
   <content type="html">&lt;p&gt;从昨天到现在一直都有这个问题，刚刚突然就解决了，至今不明白原理，在此记录一下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在网络设置中取消&lt;strong&gt;需要IPv6完成这个链接&lt;/strong&gt;的选项&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>关于正弦交流电有效值计算公式的证明</title>
   <link href="http://hsfzxjy.github.io//provement-of-Sinusoidal-AC-RMS-calculation-formula/"/>
   <updated>2015-03-04T19:32:50+08:00</updated>
   <id>http://hsfzxjy.github.io//provement-of-Sinusoidal-AC-RMS-calculation-formula</id>
   <content type="html">&lt;h3&gt;公式&lt;/h3&gt;

&lt;p&gt;$I = {I_m \over \sqrt{2}}$&lt;/p&gt;

&lt;h3&gt;证明&lt;/h3&gt;

&lt;p&gt;设 $I = Asin\omega t$，则$I^2 = A^2sin^2\omega t$。&lt;/p&gt;

&lt;p&gt;取半个周期进行计算：$${Q \over R} $$&lt;br /&gt;
$$= \int_0^{T \over 2} I^2tdt$$&lt;br /&gt;
$$={A^2 \over 2}(t - {sin2\omega t \over 2\omega})|_{0}^{T \over 2}$$&lt;br /&gt;
$$={A^2T \over 4}$$&lt;br /&gt;
$$={I^2T \over 2}$$&lt;/p&gt;

&lt;p&gt;进而： $I = {A \over \sqrt{2}}$&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>【HFMUN重构系列】3. 消息系统</title>
   <link href="http://hsfzxjy.github.io//HFMUN-reconstruction-3/"/>
   <updated>2015-03-03T21:53:20+08:00</updated>
   <id>http://hsfzxjy.github.io//HFMUN-reconstruction-3</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;一个真正优秀的系统，值得你无数次地去重构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;消息系统算是网站比较重要的一部分，它承担着将&lt;strong&gt;已发生的事件通知给相关用户&lt;/strong&gt;的责任。看似简单，但若想做到DRY，实现起来却很复杂——因为，通知的类型太多了。&lt;/p&gt;

&lt;p&gt;这个系统，在三个项目中我实现了三次。三次都使用不同的方法，但三次都不怎么满意。这最后一次，算是比较成功的一次了。&lt;/p&gt;

&lt;p&gt;在第一版模联网站中，我采用了一个堪称最糟糕的方案（如图所示）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/wboard_notifications.jpg&quot; alt=&quot;UML&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个方案最大的缺点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;耦合度太高&lt;/strong&gt;。如果有一天，又多了一种消息类型，那么就要多加一张表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询的难度大&lt;/strong&gt;。通常来说我们需要显示所有的消息，从而需要使用JOIN语句进行多表联查——这效率是很低的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL本身就不是面向对象的&lt;/strong&gt;。虽说&lt;code&gt;CommentNotification&lt;/code&gt;是&lt;code&gt;Notification&lt;/code&gt;的子类，可查询时却并不能使用类似&lt;code&gt;Notification.objects.all()&lt;/code&gt;一类的语句。在一定程度上可以说：SQL本身就不是面向对象的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而在第二版模联网站中，我采用了&lt;a href=&quot;https://docs.djangoproject.com/en/1.7/ref/contrib/contenttypes/&quot;&gt;泛型&lt;/a&gt;（Generic Model Relations）这一技术来实现——这是Django另一大特色：&lt;strong&gt;通过记录对象的类型信息以及唯一标识符，实现了一种可以指向任何表的外键（GenericRelation）&lt;/strong&gt;。这种技术存在的目的就是为了&lt;strong&gt;解耦合&lt;/strong&gt;，使系统扩展更具灵活性——尽管要损失一些效率，但与架构的“健康”比起来那是微不足道的，无可厚非。&lt;/p&gt;

&lt;p&gt;UML图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hfmun_notices.jpg&quot; alt=&quot;UML&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这其中，&lt;code&gt;notice_type&lt;/code&gt;的取值决定了&lt;strong&gt;&lt;code&gt;url&lt;/code&gt;域的作用&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;link&lt;/code&gt;&lt;/strong&gt;。该消息的&lt;code&gt;url&lt;/code&gt;域表示一个指向&lt;code&gt;related_object&lt;/code&gt;的地址，应该展示给用户看。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;invoke&lt;/code&gt;&lt;/strong&gt;。该消息需要在用户确认后执行一个动作。其&lt;code&gt;url&lt;/code&gt;域表示需要执行的动作的地址——这里有些TaskQueue的意味。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而，发消息时又应该怎么做呢？如果在所有的地方都来一句：&lt;code&gt;Notice.create(......)&lt;/code&gt;，那也太不DRY了吧？&lt;/p&gt;

&lt;p&gt;有人说：“懒惰是程序员的天性。”&lt;/p&gt;

&lt;p&gt;我赞同，但我还想补充一句：“懒惰更是程序员精简代码的动力。”&lt;/p&gt;

&lt;p&gt;于是，我创立了一个类&lt;code&gt;NoticeDispatcher&lt;/code&gt;，用于分发消息——其实这一类工具代码在之前的系统中也存在过，只不过这一版本的令我更为满意。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class NoticeDispatcher(object):

    def __init__(self, model, default = {}):
        if not issubclass(model, SendNoticeModelMixin):
            raise TypeError('The `model` must be a subclass of  `SendNoticeModelMixin`.')
        self.__model = model
        self.__default = {}
        self.__default.update(default)

    def send(self, *args, **kwargs):
        klass = Notice

        title = self.__model.generate_title(*args, **kwargs) 
        content = self.__model.generate_content(*args, **kwargs) 
        url = self.__model.generate_url(*args, **kwargs)
        user = self.__model.generate_user(*args, **kwargs)

        valid_keys_set = set(kwargs.iterkeys()) &amp;amp; \
            set(field.name for field in klass._meta.fields)

        params = deepcopy(self.__default)
        params.update({key: kwargs[key] for key in valid_keys_set})
        params.update({
            'title': title,
            'content': content,
            'url': url,
        })

        results = []
        try:
            iter(user)
        except:
            user = (user,)

        for _user in user:
            params['user'] = _user
            notice = klass(*args, **params)
            notice.save()
            results.append(notice)

        return results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以传入一个模型类作为参数从而获得一个&lt;code&gt;NoticeDispatcher&lt;/code&gt;对象。这个模型类被要求继承于&lt;code&gt;notices.mixins.SendNoticeModelMixin&lt;/code&gt;，以完成一些默认的配置——这是一个抽象基类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class SendNoticeModelMixin(object):

    @classmethod
    def generate_title(klass, *args, **kwargs):
        return ''

    @classmethod
    def generate_content(klass, *args, **kwargs):
        return ''

    @classmethod
    def generate_url(klass, *args, **kwargs):
        return ''

    @classmethod
    def generate_user(klass, *args, **kwargs):
        return []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;做完这一切之后，每当调用&lt;code&gt;notice_dispatcher.send()&lt;/code&gt;方法时，&lt;code&gt;NoticeDispatcher&lt;/code&gt;会自动调用模型类中的&lt;code&gt;generate_*&lt;/code&gt;方法以获取构建消息对象的默认参数。像一些基本不变的内容——如&lt;code&gt;url&lt;/code&gt;、&lt;code&gt;title&lt;/code&gt;就可以用代码自动生成，进而提高代码复用率。&lt;/p&gt;

&lt;p&gt;当然，这个系统仍有一些不够完善的地方，如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;notice_type&lt;/code&gt;为&lt;code&gt;invoke&lt;/code&gt;时的逻辑至今尚未实现。&lt;/li&gt;
&lt;li&gt;当消息的构建不需要&lt;code&gt;related_object&lt;/code&gt;参数时，仍需调用原生的&lt;code&gt;create&lt;/code&gt;方法，非常麻烦。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;related_object&lt;/code&gt;参数仍需手动传入，有些不干净——最好就是能在&lt;code&gt;SendNoticeModelMixin&lt;/code&gt;上实现&lt;code&gt;send&lt;/code&gt;方法，很多啰嗦的代码便又可以省略掉了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上问题，或是由于没有需求，或是由于懒惰（- -!），没有来得及去实现。但愿能在下一次改进时解决。&lt;/p&gt;

&lt;p&gt;总而言之呢，事情正在似乎在朝着好的方面发展。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>十年</title>
   <link href="http://hsfzxjy.github.io//ten-years/"/>
   <updated>2015-03-03T20:19:18+08:00</updated>
   <id>http://hsfzxjy.github.io//ten-years</id>
   <content type="html">&lt;p&gt;再一次站在这里，我却发现早已没有了熟悉的感觉。一切都是那样陌生：长年累月的雨水冲刷，使原本灰色的墙面变得愈加晦暗，有几处墙皮脱落了，酷似一张布满皱纹的老脸；门前，野草肆意地疯长着，没过了缩在墙角的那根水管——记忆中它一直在渗水，却不知何时被修好了，只留下了一圈丑陋的青苔，像是对这十年光阴的一个标注。&lt;/p&gt;

&lt;p&gt;这里的一切，就像是被人遗弃了。四周站着的那一圈高楼，无时无刻不在表达着对这角隅的不屑——就像长辈们对待无知的孩童一样。&lt;br /&gt;
而事实上，这里比周围的一切都要年长。&lt;/p&gt;

&lt;p&gt;时光上溯十年，那时，我居住于此。那时，还没有周围这一切。&lt;/p&gt;

&lt;p&gt;曾记得，在不远处的那块菜地，我和小伙伴趟过泥水，猫着腰在捕捉小鱼小虾。柔软的泥土记录这我们的足迹，竹架上的蔬果聆听着我们的欢笑，就连那不知名的虫儿，也哼起歌为我们助兴。&lt;/p&gt;

&lt;p&gt;曾记得，在屋后的那片小树林，上演过一次又一次的“探险之旅”。不畏阴暗，不惧神秘，只求抵达尽头时那种大汗淋漓的快意。&lt;/p&gt;

&lt;p&gt;曾记得，在楼顶的天台，我第一次仰望星空。夏夜的风吹起架子上的藤蔓，吹拂着我的脸庞。和着如水的月光，四周的一切就像仙境般梦幻。&lt;/p&gt;

&lt;p&gt;这里，有着我童年的所有回忆。&lt;/p&gt;

&lt;p&gt;可如今，这一切都像是未曾发生过。这里，也未曾记得。&lt;/p&gt;

&lt;p&gt;十年，很长，长得足以让一个人，去遗忘一个地方。&lt;/p&gt;

&lt;p&gt;再一次遇见他，没有太多的喜悦，只是相视一笑，随即，便陷入了沉默。&lt;/p&gt;

&lt;p&gt;比起上一次相遇，他又有了一些变化，整个人显得更加成熟了。但与此同时，一种未知的像雾一样的却在我们中间弥散开来，凝固着空气，窒息着心灵。&lt;/p&gt;

&lt;p&gt;我竭力搜寻着话题，想要打破这恼人的尴尬，但却徒劳无功——真的没有共同语言了，毕竟在新的环境里，我们都有了新的爱好。&lt;/p&gt;

&lt;p&gt;真是一个让人迷惑的时代——在这里，共有着美好的回忆，却也无法维系十年的友情。&lt;/p&gt;

&lt;p&gt;在那人生的上古时期，他，是我最好的朋友，一起逃过课，在小学边上的山坡尽情地疯玩；一起偷过钱，忐忑地在小商店购买垂涎已久的零食。那些年和他，一玩能玩一天，一聊能聊一宿。我们有过争吵，而更多时候，我们亲如弟兄。&lt;/p&gt;

&lt;p&gt;记忆中的那些画面，每一张笑脸，每一滴眼泪，都是那样真诚。&lt;/p&gt;

&lt;p&gt;只是，曾经的旧知己，最终还是变不到老友。&lt;/p&gt;

&lt;p&gt;十年，很长，长得足以让一个人，去疏远另一个人。&lt;/p&gt;

&lt;p&gt;十年，真的很长。承载着过去的回忆，有欢笑，有泪水——就像是人那短暂一生的缩影。&lt;/p&gt;

&lt;p&gt;人生又能有几个十年？无从得知。&lt;/p&gt;

&lt;p&gt;因此，每一个十年都弥足珍贵；每一个十年，都要用心去珍惜。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ubuntu杀死进程</title>
   <link href="http://hsfzxjy.github.io//kill-processes-under-ubuntu/"/>
   <updated>2015-03-02T19:17:55+08:00</updated>
   <id>http://hsfzxjy.github.io//kill-processes-under-ubuntu</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;ps -e #查看进程列表
sudo kill &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>【HFMUN重构系列】2. 用户系统</title>
   <link href="http://hsfzxjy.github.io//HFMUN-reconstruction-2/"/>
   <updated>2015-01-28T20:41:10+08:00</updated>
   <id>http://hsfzxjy.github.io//HFMUN-reconstruction-2</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;现在，我比任何时候都要有主见。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是这次重构过程中我最想说的一句话了。&lt;/p&gt;

&lt;p&gt;毋庸置疑，Django是一个十分优秀的Web框架：高效的开发模式，完备的应用集成，以及最重要的一点——具有完全自由的扩展能力——这是Django的灵魂所在。但是无知，通常会束缚了一个人的探索欲望与创新能力，让其变得胆怯、变得懒惰。一年前我的遭遇就很好地印证了这一点。&lt;/p&gt;

&lt;p&gt;对于一个网站而言，用户永远是最重要的元素。没有了用户，网站做得再好也只能被放在角落腐烂，与死尸无异。这样看来，打造一个完美的用户系统就显得十分必要了。&lt;/p&gt;

&lt;p&gt;Django为我们提供了一个优秀的用户系统，它位于&lt;code&gt;django.contrib.auth&lt;/code&gt;——想必Djangoers都对它很熟悉了。&lt;code&gt;auth&lt;/code&gt;应用是专门为用户管理打造的一个应用，它提供了以下功能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个用户模型（User）。这是&lt;code&gt;auth&lt;/code&gt;框架的核心所在，用于存储用户信息，包括 用户名、密码、邮箱等内容。该模型可被替换也可被拓展，具有良好的可塑性。&lt;/li&gt;
&lt;li&gt;一个权限系统（Permission）。这部分为实现访问控制提供了可能。一个&lt;code&gt;Permission&lt;/code&gt;对应一个关于&lt;code&gt;Model&lt;/code&gt;的操作，默认有&lt;code&gt;add&lt;/code&gt;、&lt;code&gt;change&lt;/code&gt;、&lt;code&gt;delete&lt;/code&gt;三种。值得一提的是，在版本&lt;code&gt;1.7&lt;/code&gt;之前，Django并不提供更改默认权限的能力，即每个&lt;code&gt;Model&lt;/code&gt;都会固定拥有以上三种权限。我个人觉得这种做法不太好，并不是所有的模型都需要这种功能划分。更何况权限限制被应用在Django的每一个角落，如果想让一个模型完全开放，就要多敲许多不必要的代码。如今Django1.7改进了这一点，这使得模型更加简洁了。&lt;/li&gt;
&lt;li&gt;用户分组的功能（Groups）。一个&lt;code&gt;Group&lt;/code&gt;可以拥有多个&lt;code&gt;Permission&lt;/code&gt;，一个用户可以选择加入一个&lt;code&gt;Group&lt;/code&gt;，并会自动拥有还&lt;code&gt;Group&lt;/code&gt;的权限。这一设计简化了用户管理的操作，同时也让用户系统的更有层次。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这里，我想说的是关于扩展&lt;code&gt;User&lt;/code&gt;模型的一些技巧。&lt;/p&gt;

&lt;p&gt;一年之前，由于对Django的不了解，我不敢对它的内部实现大动干戈。而事实上，没有什么东西是绝对完美的，即便是集众智于一身的开源框架也是如此。诚然，&lt;code&gt;auth&lt;/code&gt;框架是不错，但在某些特定的应用场景，它便显得心有余而力不足了。因此，我希望能在&lt;code&gt;User&lt;/code&gt;模型上附带一些额外的信息。&lt;/p&gt;

&lt;p&gt;百度一下，我找到了一个被广为流传的方法：&lt;code&gt;Profile&lt;/code&gt;模式。也就是说，额外定义一个&lt;code&gt;Profile&lt;/code&gt;模型和&lt;code&gt;User&lt;/code&gt;模型建立一一对应的关系，用于储存额外信息。我清楚地记得，几乎是每一篇博客都在介绍这种方法，于是乎我毫不犹豫地就采纳了。现在想一想，这其实是一个十分糟糕的方案。它有如下缺点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作麻烦。&lt;/strong&gt;每次访问额外信息，都要先询问是否存在&lt;code&gt;Profile&lt;/code&gt;对象，如果不存在得先创建。然后再调用&lt;code&gt;user_object.profile&lt;/code&gt;来访问信息。同时，这种方案对表单不友好，因为用户信息是被分开储存在两个表中的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率低下。&lt;/strong&gt;每次访问额外信息，先是用&lt;code&gt;IF EXISTS&lt;/code&gt;判断是否存在，再用&lt;code&gt;INNER JOIN&lt;/code&gt;将主信息和次信息从数据库中取出，一共需要两条SQL语句。更何况，&lt;code&gt;INNER JOIN&lt;/code&gt;指令是公认的效率低下的指令。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，在这次重构中我采用了一种截然不同的做法：直接重写&lt;code&gt;User&lt;/code&gt;模型。这里的灵感来自&lt;a href=&quot;https://docs.djangoproject.com/en/1.7/topics/auth/customizing/#auth-custom-user&quot;&gt;Django官方文档&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some kinds of projects may have authentication requirements for which Django’s built-in User model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.&lt;/p&gt;
&lt;p&gt;Django allows you to override the default User model by providing a value for the AUTH_USER_MODEL setting that references a custom model:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; AUTH_USER_MODEL = 'myapp.MyUser'
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;听起来不错，既方便实现起来又简单。于是我重写了我的&lt;code&gt;accounts&lt;/code&gt;应用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#encoding=utf8
&quot;&quot;&quot;
    事实上这里许多实现都模仿自`django.contrib.auth.models.User`，毕竟我只是要存储一些额外信息而已。
&quot;&quot;&quot;
from django.core import validators
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.utils.translation import ugettext_lazy as _
from django.utils import timezone
from django.db import models

class UserManager(BaseUserManager):

    def _create_user(self, username, password,
                     is_staff, is_superuser, **extra_fields):
        &quot;&quot;&quot;
        Creates and saves a User with the given username, email and password.
        &quot;&quot;&quot;
        now = timezone.now()
        if not username:
            raise ValueError('The given username must be set')
        user = self.model(username=username,
                          is_staff=is_staff, is_active=True,
                          is_superuser=is_superuser, last_login=now,
                          date_joined=now, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_user(self, username, password=None, **extra_fields):
        return self._create_user(username, password, False, False,
                                 **extra_fields)

    def create_superuser(self, username, password, **extra_fields):
        return self._create_user(username, password, True, True,
                                 **extra_fields)

# 这里的`AbstractBaseUser`是用户模型的基类，由于原生的`User`模型中有一些字段并不是我想要的，因此我需要从上一个抽象类继承。
class User(AbstractBaseUser, PermissionsMixin):

    username = models.CharField(_('username'), max_length=30, unique=True,
        help_text=_('Required. 30 characters or fewer. Letters, digits and '
                    '@/./+/-/_ only.'),
        validators=[
            validators.RegexValidator(r'^[\w.@+-]+$', _('Enter a valid username.'), 'invalid')
        ])

    # 用户描述
    description = models.TextField()

    # 昵称
    nickname = models.CharField(_('nickname'),
        max_length=30, unique=True,
        help_text=_('Required. 30 characters or fewer.'),
        )

    # 好友关系
    friends = models.ManyToManyField(
        'self',
        verbose_name=_('friends'),
        blank=True,
        related_name='+'
        )

    #================以下是原有的字段==================
    is_staff = models.BooleanField(_('staff status'), default=False,
        help_text=_('Designates whether the user can log into this admin '
                    'site.'))
    is_active = models.BooleanField(_('active'), default=True,
        help_text=_('Designates whether this user should be treated as '
                    'active. Unselect this instead of deleteing accounts.'))
    date_joined = models.DateTimeField(_('date joined'), auto_now_add=True)

    USERNAME_FIELD = 'username'
    objects = UserManager()

    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')

    def get_full_name(self):
        return self.nickname

    def get_short_name(self):
        return self.nickname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以及&lt;code&gt;settings.py&lt;/code&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#...
AUTH_USER_MODEL = 'accounts.User'
#...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了让admin框架同步支持我们的新&lt;code&gt;User&lt;/code&gt;模型，还需要对&lt;code&gt;admin.py&lt;/code&gt;以及&lt;code&gt;forms.py&lt;/code&gt;进行相应的修改，实际上就是把新加入的字段写进相应的类即可，在这里我就不贴代码了。&lt;/p&gt;

&lt;p&gt;做完这一切，一个念头忽然从我脑海中闪过：对于一些第三方应用，如果它们直接引用了&lt;code&gt;django.contrib.auth.models.User&lt;/code&gt;，那该怎么办呢？我的&lt;code&gt;User&lt;/code&gt;模型会生效吗？&lt;/p&gt;

&lt;p&gt;这让我感到不安，因为重构的一大原则便是：不得改变外部接口的调用情况。如果这一改动使得整个网站都崩溃了，那就得不偿失了。可庆幸的是，这样的事情并没有发生。&lt;/p&gt;

&lt;p&gt;这不禁让我感到好奇：django是怎么做到这一点的？&lt;/p&gt;

&lt;p&gt;翻看&lt;code&gt;django.contrib.auth.models&lt;/code&gt;，我发现了如下一句代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User(AbstractUser):
    &quot;&quot;&quot;
    Users within the Django authentication system are represented by this
    model.

    Username, password and email are required. Other fields are optional.
    &quot;&quot;&quot;
    class Meta(AbstractUser.Meta):
        swappable = 'AUTH_USER_MODEL'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查找&lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/models/fields/#django.db.models.ForeignKey.swappable&quot;&gt;Django文档&lt;/a&gt;，原来这是Django1.7的一个新特性：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ForeignKey.swappable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Controls the migration framework’s reaction if this ForeignKey is pointing at a swappable model. If it is True - the default - then if the ForeignKey is pointing at a model which matches the current value of settings.AUTH_USER_MODEL (or another swappable model setting) the relationship will be stored in the migration using a reference to the setting, not to the model directly.&lt;/p&gt;
&lt;p&gt;You only want to override this to be False if you are sure your model should always point towards the swapped-in model - for example, if it is a profile model designed specifically for your custom user model.&lt;/p&gt;
&lt;p&gt;Setting it to False does not mean you can reference a swappable model even if it is swapped out - False just means that the migrations made with this ForeignKey will always reference the exact model you specify (so it will fail hard if the user tries to run with a User model you don’t support, for example).&lt;/p&gt;
&lt;p&gt;If in doubt, leave it to its default of True.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个特性可以使指向这个模型的ForeignKey自动被替换成&lt;code&gt;Meta.swappable&lt;/code&gt;的内容，实现模型的可替换能力。这是一个巧妙的设计。&lt;/p&gt;

&lt;p&gt;重构后的&lt;code&gt;accounts&lt;/code&gt;应用，逻辑变得更加清晰，也使我不再纠结于冗长的恼人的&lt;code&gt;Profile&lt;/code&gt;调用。&lt;/p&gt;

&lt;p&gt;这，是一个美妙的起点。&lt;/p&gt;
</content>
 </entry>
 
 
</feed>